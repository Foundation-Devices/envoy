// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> backup_last_error_message() {
    return _backup_last_error_message();
  }

  late final _backup_last_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'backup_last_error_message');
  late final _backup_last_error_message = _backup_last_error_messagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  bool backup_perform(
    BackupPayload payload,
    ffi.Pointer<ffi.Char> seed_words,
    ffi.Pointer<ffi.Char> server_url,
    int proxy_port,
  ) {
    return _backup_perform(
      payload,
      seed_words,
      server_url,
      proxy_port,
    );
  }

  late final _backup_performPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(BackupPayload, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('backup_perform');
  late final _backup_perform = _backup_performPtr.asFunction<
      bool Function(
          BackupPayload, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  bool backup_perform_offline(
    BackupPayload payload,
    ffi.Pointer<ffi.Char> seed_words,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _backup_perform_offline(
      payload,
      seed_words,
      path,
    );
  }

  late final _backup_perform_offlinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(BackupPayload, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('backup_perform_offline');
  late final _backup_perform_offline = _backup_perform_offlinePtr.asFunction<
      bool Function(
          BackupPayload, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  BackupPayload backup_get(
    ffi.Pointer<ffi.Char> seed_words,
    ffi.Pointer<ffi.Char> server_url,
    int proxy_port,
  ) {
    return _backup_get(
      seed_words,
      server_url,
      proxy_port,
    );
  }

  late final _backup_getPtr = _lookup<
      ffi.NativeFunction<
          BackupPayload Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('backup_get');
  late final _backup_get = _backup_getPtr.asFunction<
      BackupPayload Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  BackupPayload backup_get_offline(
    ffi.Pointer<ffi.Char> seed_words,
    ffi.Pointer<ffi.Char> file_path,
  ) {
    return _backup_get_offline(
      seed_words,
      file_path,
    );
  }

  late final _backup_get_offlinePtr = _lookup<
      ffi.NativeFunction<
          BackupPayload Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('backup_get_offline');
  late final _backup_get_offline = _backup_get_offlinePtr.asFunction<
      BackupPayload Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int backup_delete(
    ffi.Pointer<ffi.Char> seed_words,
    ffi.Pointer<ffi.Char> server_url,
    int proxy_port,
  ) {
    return _backup_delete(
      seed_words,
      server_url,
      proxy_port,
    );
  }

  late final _backup_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('backup_delete');
  late final _backup_delete = _backup_deletePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();
}

class BackupPayload extends ffi.Struct {
  @ffi.Uint8()
  external int keys_nr;

  external ffi.Pointer<ffi.Pointer<ffi.Char>> data;
}

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int INT8_WIDTH = 8;

const int UINT8_WIDTH = 8;

const int INT16_WIDTH = 16;

const int UINT16_WIDTH = 16;

const int INT32_WIDTH = 32;

const int UINT32_WIDTH = 32;

const int INT64_WIDTH = 64;

const int UINT64_WIDTH = 64;

const int INT_LEAST8_WIDTH = 8;

const int UINT_LEAST8_WIDTH = 8;

const int INT_LEAST16_WIDTH = 16;

const int UINT_LEAST16_WIDTH = 16;

const int INT_LEAST32_WIDTH = 32;

const int UINT_LEAST32_WIDTH = 32;

const int INT_LEAST64_WIDTH = 64;

const int UINT_LEAST64_WIDTH = 64;

const int INT_FAST8_WIDTH = 8;

const int UINT_FAST8_WIDTH = 8;

const int INT_FAST16_WIDTH = 64;

const int UINT_FAST16_WIDTH = 64;

const int INT_FAST32_WIDTH = 64;

const int UINT_FAST32_WIDTH = 64;

const int INT_FAST64_WIDTH = 64;

const int UINT_FAST64_WIDTH = 64;

const int INTPTR_WIDTH = 64;

const int UINTPTR_WIDTH = 64;

const int INTMAX_WIDTH = 64;

const int UINTMAX_WIDTH = 64;

const int PTRDIFF_WIDTH = 64;

const int SIG_ATOMIC_WIDTH = 32;

const int SIZE_WIDTH = 64;

const int WCHAR_WIDTH = 32;

const int WINT_WIDTH = 32;

const int NULL = 0;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;
