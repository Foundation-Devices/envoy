// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'ble/device.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `inner_benchmark`, `inner_connect`, `inner_disconnect`, `inner_read`, `inner_scan`, `inner_write_all`, `inner_write`, `remove_stale_devices`, `send_devices`, `send`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `Command`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`

/// The init() function must be called before anything else.
/// At the moment the developer has to make sure it is only called once.
Stream<List<BleDevice>> init() => RustLib.instance.api.crateApiBleInit();

/// This function is used to scan for BLE devices and returns the results via the given stream sink.
///
/// Parameters
///
/// sink: StreamSink<Vec<BleDevice>> - A stream sink to which the results are send
///
/// filter: Vec<String> - A vector of strings to filter the results with
Future<void> scan({required List<String> filter}) =>
    RustLib.instance.api.crateApiBleScan(filter: filter);

Future<void> connect({required String id}) =>
    RustLib.instance.api.crateApiBleConnect(id: id);

Future<void> disconnect({required String id}) =>
    RustLib.instance.api.crateApiBleDisconnect(id: id);

Stream<BigInt> benchmark({required String id}) =>
    RustLib.instance.api.crateApiBleBenchmark(id: id);

Future<void> write({required String id, required List<int> data}) =>
    RustLib.instance.api.crateApiBleWrite(id: id, data: data);

Future<void> writeAll({required String id, required List<Uint8List> data}) =>
    RustLib.instance.api.crateApiBleWriteAll(id: id, data: data);

Stream<Uint8List> read({required String id}) =>
    RustLib.instance.api.crateApiBleRead(id: id);
