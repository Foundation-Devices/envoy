// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

// These functions are ignored because they are not marked as `pub`: `read`

Future<Adapter?> firstAdapter() =>
    RustLib.instance.api.crateApiBluartFirstAdapter();

Future<List<Adapter>> getAdapters() =>
    RustLib.instance.api.crateApiBluartGetAdapters();

Future<List<BluartPeripheral>> getPeripherals(
        {required Adapter adapter, List<String>? tcpPorts}) =>
    RustLib.instance.api
        .crateApiBluartGetPeripherals(adapter: adapter, tcpPorts: tcpPorts);

Future<void> startScan({required Adapter adapter}) =>
    RustLib.instance.api.crateApiBluartStartScan(adapter: adapter);

Future<void> stopScan({required Adapter adapter}) =>
    RustLib.instance.api.crateApiBluartStopScan(adapter: adapter);

Future<void> connectPeripheral({required BluartPeripheral peripheral}) =>
    RustLib.instance.api
        .crateApiBluartConnectPeripheral(peripheral: peripheral);

Future<String> getNameFromPerihperal({required BluartPeripheral peripheral}) =>
    RustLib.instance.api
        .crateApiBluartGetNameFromPerihperal(peripheral: peripheral);

Future<bool> isConnected({required BluartPeripheral peripheral}) =>
    RustLib.instance.api.crateApiBluartIsConnected(peripheral: peripheral);

Future<void> writeTo(
        {required BluartPeripheral peripheral,
        required UuidValue rxCharacteristic,
        required List<int> data}) =>
    RustLib.instance.api.crateApiBluartWriteTo(
        peripheral: peripheral, rxCharacteristic: rxCharacteristic, data: data);

Future<Uint8List> readFrom(
        {required BluartPeripheral peripheral,
        required UuidValue characteristic}) =>
    RustLib.instance.api.crateApiBluartReadFrom(
        peripheral: peripheral, characteristic: characteristic);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner< Adapter>>
abstract class Adapter implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BluartPeripheral>>
abstract class BluartPeripheral implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TcpAsPeripheral>>
abstract class TcpAsPeripheral implements RustOpaqueInterface {
  String get port;

  set port(String port);

  Future<void> connect();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<TcpAsPeripheral> newInstance({required String url}) =>
      RustLib.instance.api.crateApiBluartTcpAsPeripheralNew(url: url);

  Future<void> write({required List<int> data});
}
