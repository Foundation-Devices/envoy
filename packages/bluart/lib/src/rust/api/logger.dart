// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `to_level_filter`
// These types are ignored because they are not used by any `pub` functions: `LogBuilder`, `Logger`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `on_event`, `record_debug`, `record_str`, `record_u64`

Future<void> addLogger({required String name, required LogLevel level}) =>
    RustLib.instance.api.crateApiLoggerAddLogger(name: name, level: level);

/// This function creates the tracing_subscriber::Registry and must be called at most once.
Stream<String> enableLogging() =>
    RustLib.instance.api.crateApiLoggerEnableLogging();

enum LogLevel {
  debug,
  info,
  ;
}

class LogVisitor {
  final String? message;
  final String? modulePath;
  final String? line;
  final String rest;

  const LogVisitor({
    this.message,
    this.modulePath,
    this.line,
    required this.rest,
  });

  static Future<LogVisitor> default_() =>
      RustLib.instance.api.crateApiLoggerLogVisitorDefault();

  @override
  int get hashCode =>
      message.hashCode ^ modulePath.hashCode ^ line.hashCode ^ rest.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LogVisitor &&
          runtimeType == other.runtimeType &&
          message == other.message &&
          modulePath == other.modulePath &&
          line == other.line &&
          rest == other.rest;
}
