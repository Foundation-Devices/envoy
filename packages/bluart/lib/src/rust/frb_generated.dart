// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/bluart.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:uuid/uuid.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.24';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_btle',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> tcpAsPeripheralConnect(
      {required TcpAsPeripheral that, dynamic hint});

  Future<TcpAsPeripheral> tcpAsPeripheralNew(
      {required String url, dynamic hint});

  Future<void> tcpAsPeripheralWrite(
      {required TcpAsPeripheral that, required List<int> data, dynamic hint});

  Future<void> connectPeripheral(
      {required BluartPeripheral peripheral, dynamic hint});

  Future<BtleplugPlatformAdapter?> firstAdapter({dynamic hint});

  Future<List<BtleplugPlatformAdapter>> getAdapters({dynamic hint});

  Future<String> getNameFromPerihperal(
      {required BluartPeripheral peripheral, dynamic hint});

  Future<List<BluartPeripheral>> getPeripherals(
      {required BtleplugPlatformAdapter adapter,
      List<String>? tcpPorts,
      dynamic hint});

  Future<bool> isConnected(
      {required BluartPeripheral peripheral, dynamic hint});

  Future<Uint8List> readFrom(
      {required BluartPeripheral peripheral,
      required UuidValue characteristic,
      dynamic hint});

  Future<void> startScan(
      {required BtleplugPlatformAdapter adapter, dynamic hint});

  Future<void> stopScan(
      {required BtleplugPlatformAdapter adapter, dynamic hint});

  Future<void> writeTo(
      {required BluartPeripheral peripheral,
      required UuidValue rxCharacteristic,
      required List<int> data,
      dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BluartPeripheral;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BluartPeripheral;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BluartPeripheralPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TcpAsPeripheral;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TcpAsPeripheral;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_TcpAsPeripheralPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BtleplugPlatformAdapter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BtleplugPlatformAdapter;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BtleplugPlatformAdapterPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> tcpAsPeripheralConnect(
      {required TcpAsPeripheral that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 12, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTcpAsPeripheralConnectConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTcpAsPeripheralConnectConstMeta => const TaskConstMeta(
        debugName: "TcpAsPeripheral_connect",
        argNames: ["that"],
      );

  @override
  Future<TcpAsPeripheral> tcpAsPeripheralNew(
      {required String url, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(url, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral,
        decodeErrorData: null,
      ),
      constMeta: kTcpAsPeripheralNewConstMeta,
      argValues: [url],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTcpAsPeripheralNewConstMeta => const TaskConstMeta(
        debugName: "TcpAsPeripheral_new",
        argNames: ["url"],
      );

  @override
  Future<void> tcpAsPeripheralWrite(
      {required TcpAsPeripheral that, required List<int> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 13, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kTcpAsPeripheralWriteConstMeta,
      argValues: [that, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTcpAsPeripheralWriteConstMeta => const TaskConstMeta(
        debugName: "TcpAsPeripheral_write",
        argNames: ["that", "data"],
      );

  @override
  Future<void> connectPeripheral(
      {required BluartPeripheral peripheral, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
            peripheral, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kConnectPeripheralConstMeta,
      argValues: [peripheral],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kConnectPeripheralConstMeta => const TaskConstMeta(
        debugName: "connect_peripheral",
        argNames: ["peripheral"],
      );

  @override
  Future<BtleplugPlatformAdapter?> firstAdapter({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter,
        decodeErrorData: null,
      ),
      constMeta: kFirstAdapterConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kFirstAdapterConstMeta => const TaskConstMeta(
        debugName: "first_adapter",
        argNames: [],
      );

  @override
  Future<List<BtleplugPlatformAdapter>> getAdapters({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter,
        decodeErrorData: null,
      ),
      constMeta: kGetAdaptersConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetAdaptersConstMeta => const TaskConstMeta(
        debugName: "get_adapters",
        argNames: [],
      );

  @override
  Future<String> getNameFromPerihperal(
      {required BluartPeripheral peripheral, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
            peripheral, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kGetNameFromPerihperalConstMeta,
      argValues: [peripheral],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetNameFromPerihperalConstMeta => const TaskConstMeta(
        debugName: "get_name_from_perihperal",
        argNames: ["peripheral"],
      );

  @override
  Future<List<BluartPeripheral>> getPeripherals(
      {required BtleplugPlatformAdapter adapter,
      List<String>? tcpPorts,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
            adapter, serializer);
        sse_encode_opt_list_String(tcpPorts, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral,
        decodeErrorData: null,
      ),
      constMeta: kGetPeripheralsConstMeta,
      argValues: [adapter, tcpPorts],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kGetPeripheralsConstMeta => const TaskConstMeta(
        debugName: "get_peripherals",
        argNames: ["adapter", "tcpPorts"],
      );

  @override
  Future<bool> isConnected(
      {required BluartPeripheral peripheral, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
            peripheral, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kIsConnectedConstMeta,
      argValues: [peripheral],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kIsConnectedConstMeta => const TaskConstMeta(
        debugName: "is_connected",
        argNames: ["peripheral"],
      );

  @override
  Future<Uint8List> readFrom(
      {required BluartPeripheral peripheral,
      required UuidValue characteristic,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
            peripheral, serializer);
        sse_encode_Uuid(characteristic, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kReadFromConstMeta,
      argValues: [peripheral, characteristic],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kReadFromConstMeta => const TaskConstMeta(
        debugName: "read_from",
        argNames: ["peripheral", "characteristic"],
      );

  @override
  Future<void> startScan(
      {required BtleplugPlatformAdapter adapter, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
            adapter, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStartScanConstMeta,
      argValues: [adapter],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStartScanConstMeta => const TaskConstMeta(
        debugName: "start_scan",
        argNames: ["adapter"],
      );

  @override
  Future<void> stopScan(
      {required BtleplugPlatformAdapter adapter, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
            adapter, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStopScanConstMeta,
      argValues: [adapter],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStopScanConstMeta => const TaskConstMeta(
        debugName: "stop_scan",
        argNames: ["adapter"],
      );

  @override
  Future<void> writeTo(
      {required BluartPeripheral peripheral,
      required UuidValue rxCharacteristic,
      required List<int> data,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
            peripheral, serializer);
        sse_encode_Uuid(rxCharacteristic, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 9, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kWriteToConstMeta,
      argValues: [peripheral, rxCharacteristic, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kWriteToConstMeta => const TaskConstMeta(
        debugName: "write_to",
        argNames: ["peripheral", "rxCharacteristic", "data"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BluartPeripheral => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BluartPeripheral => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_TcpAsPeripheral => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_TcpAsPeripheral => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BtleplugPlatformAdapter => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BtleplugPlatformAdapter => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter;

  @protected
  BluartPeripheral
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BluartPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TcpAsPeripheral
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TcpAsPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BtleplugPlatformAdapter
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BtleplugPlatformAdapter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BluartPeripheral
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BluartPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TcpAsPeripheral
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TcpAsPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BluartPeripheral
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BluartPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TcpAsPeripheral
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TcpAsPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BtleplugPlatformAdapter
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BtleplugPlatformAdapter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BluartPeripheral
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BluartPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  TcpAsPeripheral
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TcpAsPeripheral.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BtleplugPlatformAdapter
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BtleplugPlatformAdapter.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  UuidValue dco_decode_Uuid(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UuidValue.fromByteList(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  BtleplugPlatformAdapter
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as BtleplugPlatformAdapter;
  }

  @protected
  List<BluartPeripheral>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral)
        .toList();
  }

  @protected
  List<BtleplugPlatformAdapter>
      dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
            dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter)
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  BtleplugPlatformAdapter?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
            raw);
  }

  @protected
  List<String>? dco_decode_opt_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_String(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  BluartPeripheral
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BluartPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TcpAsPeripheral
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TcpAsPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BtleplugPlatformAdapter
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BtleplugPlatformAdapter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BluartPeripheral
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BluartPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TcpAsPeripheral
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TcpAsPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BluartPeripheral
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BluartPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TcpAsPeripheral
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TcpAsPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BtleplugPlatformAdapter
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BtleplugPlatformAdapter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BluartPeripheral
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BluartPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  TcpAsPeripheral
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TcpAsPeripheral.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BtleplugPlatformAdapter
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BtleplugPlatformAdapter.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  UuidValue sse_decode_Uuid(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return UuidValue.fromByteList(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  BtleplugPlatformAdapter
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
        deserializer));
  }

  @protected
  List<BluartPeripheral>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BluartPeripheral>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<BtleplugPlatformAdapter>
      sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <BtleplugPlatformAdapter>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
          sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
              deserializer));
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  BtleplugPlatformAdapter?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  List<String>? sse_decode_opt_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          BluartPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          TcpAsPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          BtleplugPlatformAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          BluartPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          TcpAsPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          BluartPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          TcpAsPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          BtleplugPlatformAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          BluartPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockTcpAsPeripheral(
          TcpAsPeripheral self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          BtleplugPlatformAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_Uuid(UuidValue self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.toBytes(), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          BtleplugPlatformAdapter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
        self, serializer);
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          List<BluartPeripheral> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockBluartPeripheral(
          item, serializer);
    }
  }

  @protected
  void
      sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          List<BtleplugPlatformAdapter> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          item, serializer);
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          BtleplugPlatformAdapter? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbtleplugplatformAdapter(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_String(
      List<String>? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_String(self, serializer);
    }
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
