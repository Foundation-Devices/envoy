// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../third_party/bc_xid.dart';
import '../third_party/foundation_api/api/bitcoin.dart';
import '../third_party/foundation_api/api/firmware.dart';
import '../third_party/foundation_api/api/fx.dart';
import '../third_party/foundation_api/api/message.dart';
import '../third_party/foundation_api/api/onboarding.dart';
import '../third_party/foundation_api/api/pairing.dart';
import '../third_party/foundation_api/api/passport.dart';
import '../third_party/foundation_api/api/quantum_link.dart';
import '../third_party/foundation_api/api/status.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Future<Dechunker> getDecoder() => RustLib.instance.api.crateApiQlGetDecoder();

Future<Uint8List> serializeXid(
        {required QuantumLinkIdentity quantumLinkIdentity}) =>
    RustLib.instance.api
        .crateApiQlSerializeXid(quantumLinkIdentity: quantumLinkIdentity);

Future<DecoderStatus> decode(
        {required List<int> data,
        required Dechunker decoder,
        required QuantumLinkIdentity quantumLinkIdentity}) =>
    RustLib.instance.api.crateApiQlDecode(
        data: data, decoder: decoder, quantumLinkIdentity: quantumLinkIdentity);

Future<List<Uint8List>> encode(
        {required EnvoyMessage message,
        required QuantumLinkIdentity sender,
        required XidDocument recipient}) =>
    RustLib.instance.api.crateApiQlEncode(
        message: message, sender: sender, recipient: recipient);

Future<QuantumLinkIdentity> generateQlIdentity() =>
    RustLib.instance.api.crateApiQlGenerateQlIdentity();

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>
abstract class Dechunker implements RustOpaqueInterface {}

class DecoderStatus {
  final double progress;
  final PassportMessage? payload;

  const DecoderStatus({
    required this.progress,
    this.payload,
  });

  @override
  int get hashCode => progress.hashCode ^ payload.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DecoderStatus &&
          runtimeType == other.runtimeType &&
          progress == other.progress &&
          payload == other.payload;
}
