// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import 'frb_generated.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/foundation_api.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Enclave>>
abstract class Enclave implements RustOpaqueInterface, AbstractEnclave {
  Future<Envelope> decrypt({required Envelope envelope});

  Future<SealedRequest> envelopeToSealedRequest({required Envelope envelope});

  Future<SealedResponse> envelopeToSealedResponse({required Envelope envelope});

  Future<SealedResponse> envelopeToSealedResponseWithRequestId(
      {required Envelope envelope, required Arid requestId});

  Future<void> publicKey();

  Future<Envelope> seal(
      {required Envelope envelope, required PublicKeyBase recipient});

  Future<Envelope> sealedRequestAndRecipientToEnvelope(
      {required SealedRequest request, required PublicKeyBase recipient});

  Future<Envelope> sealedRequestToEnvelope({required SealedRequest request});

  Future<Envelope> sealedResponseToEnvelope({required SealedResponse response});

  Future<Envelope> selfDecrypt({required Envelope envelope});

  Future<Envelope> selfEncrypt({required Envelope envelope});

  Future<Envelope> sign({required Envelope envelope});

  Future<Envelope> unseal(
      {required Envelope envelope, required PublicKeyBase sender});

  Future<Envelope> verify({required Envelope envelope});
}
