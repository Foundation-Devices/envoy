// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/ql.dart';
import 'api/qr.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/bc_xid.dart';
import 'third_party/foundation_api/api/bitcoin.dart';
import 'third_party/foundation_api/api/firmware.dart';
import 'third_party/foundation_api/api/fx.dart';
import 'third_party/foundation_api/api/message.dart';
import 'third_party/foundation_api/api/onboarding.dart';
import 'third_party/foundation_api/api/pairing.dart';
import 'third_party/foundation_api/api/passport.dart';
import 'third_party/foundation_api/api/quantum_link.dart';
import 'third_party/foundation_api/api/scv.dart';
import 'third_party/foundation_api/api/status.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiQrInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -755752152;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_foundation_api',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<DecoderStatus> crateApiQlDecode(
      {required List<int> data,
      required Dechunker decoder,
      required QuantumLinkIdentity quantumLinkIdentity});

  Future<PassportMessage> crateApiQrDecodeBleMessage({required List<int> data});

  Future<QrDecoderStatus> crateApiQrDecodeQr(
      {required String qr, required ArcMutexDecoder decoder});

  Future<XidDocument> crateApiQlDeserializeXid({required List<int> data});

  Future<List<Uint8List>> crateApiQlEncode(
      {required EnvoyMessage message,
      required QuantumLinkIdentity sender,
      required XidDocument recipient});

  Future<QuantumLinkIdentity> crateApiQlGenerateQlIdentity();

  Future<Dechunker> crateApiQlGetDecoder();

  Future<ArcMutexDecoder> crateApiQrGetQrDecoder();

  String crateApiQrGreet({required String name});

  Future<void> crateApiQrInitApp();

  Future<Uint8List> crateApiQlSerializeXid(
      {required QuantumLinkIdentity quantumLinkIdentity});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcMutexDecoder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcMutexDecoder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcMutexDecoderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Dechunker;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Dechunker;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_DechunkerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_QuantumLinkIdentity;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_QuantumLinkIdentity;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_QuantumLinkIdentityPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XidDocument;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XidDocument;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_XidDocumentPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<DecoderStatus> crateApiQlDecode(
      {required List<int> data,
      required Dechunker decoder,
      required QuantumLinkIdentity quantumLinkIdentity}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(data, serializer);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
            decoder, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
            quantumLinkIdentity, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_decoder_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiQlDecodeConstMeta,
      argValues: [data, decoder, quantumLinkIdentity],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQlDecodeConstMeta => const TaskConstMeta(
        debugName: "decode",
        argNames: ["data", "decoder", "quantumLinkIdentity"],
      );

  @override
  Future<PassportMessage> crateApiQrDecodeBleMessage(
      {required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_passport_message,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQrDecodeBleMessageConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQrDecodeBleMessageConstMeta => const TaskConstMeta(
        debugName: "decode_ble_message",
        argNames: ["data"],
      );

  @override
  Future<QrDecoderStatus> crateApiQrDecodeQr(
      {required String qr, required ArcMutexDecoder decoder}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(qr, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
            decoder, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_qr_decoder_status,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiQrDecodeQrConstMeta,
      argValues: [qr, decoder],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQrDecodeQrConstMeta => const TaskConstMeta(
        debugName: "decode_qr",
        argNames: ["qr", "decoder"],
      );

  @override
  Future<XidDocument> crateApiQlDeserializeXid({required List<int> data}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiQlDeserializeXidConstMeta,
      argValues: [data],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQlDeserializeXidConstMeta => const TaskConstMeta(
        debugName: "deserialize_xid",
        argNames: ["data"],
      );

  @override
  Future<List<Uint8List>> crateApiQlEncode(
      {required EnvoyMessage message,
      required QuantumLinkIdentity sender,
      required XidDocument recipient}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_envoy_message(message, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
            sender, serializer);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
            recipient, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQlEncodeConstMeta,
      argValues: [message, sender, recipient],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQlEncodeConstMeta => const TaskConstMeta(
        debugName: "encode",
        argNames: ["message", "sender", "recipient"],
      );

  @override
  Future<QuantumLinkIdentity> crateApiQlGenerateQlIdentity() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQlGenerateQlIdentityConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQlGenerateQlIdentityConstMeta =>
      const TaskConstMeta(
        debugName: "generate_ql_identity",
        argNames: [],
      );

  @override
  Future<Dechunker> crateApiQlGetDecoder() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQlGetDecoderConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQlGetDecoderConstMeta => const TaskConstMeta(
        debugName: "get_decoder",
        argNames: [],
      );

  @override
  Future<ArcMutexDecoder> crateApiQrGetQrDecoder() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQrGetQrDecoderConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQrGetQrDecoderConstMeta => const TaskConstMeta(
        debugName: "get_qr_decoder",
        argNames: [],
      );

  @override
  String crateApiQrGreet({required String name}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(name, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQrGreetConstMeta,
      argValues: [name],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQrGreetConstMeta => const TaskConstMeta(
        debugName: "greet",
        argNames: ["name"],
      );

  @override
  Future<void> crateApiQrInitApp() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQrInitAppConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQrInitAppConstMeta => const TaskConstMeta(
        debugName: "init_app",
        argNames: [],
      );

  @override
  Future<Uint8List> crateApiQlSerializeXid(
      {required QuantumLinkIdentity quantumLinkIdentity}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
            quantumLinkIdentity, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiQlSerializeXidConstMeta,
      argValues: [quantumLinkIdentity],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiQlSerializeXidConstMeta => const TaskConstMeta(
        debugName: "serialize_xid",
        argNames: ["quantumLinkIdentity"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcMutexDecoder => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcMutexDecoder => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_Dechunker => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_Dechunker => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_QuantumLinkIdentity => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_QuantumLinkIdentity => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_XidDocument => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_XidDocument => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcMutexDecoder
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcMutexDecoderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Dechunker
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DechunkerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuantumLinkIdentity
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuantumLinkIdentityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  XidDocument
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XidDocumentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Dechunker
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DechunkerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcMutexDecoder
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcMutexDecoderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuantumLinkIdentity
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuantumLinkIdentityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  XidDocument
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XidDocumentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcMutexDecoder
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcMutexDecoderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Dechunker
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DechunkerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  QuantumLinkIdentity
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return QuantumLinkIdentityImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  XidDocument
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return XidDocumentImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AccountUpdate dco_decode_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AccountUpdate(
      accountId: dco_decode_String(arr[0]),
      update: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  XidDocument
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        raw);
  }

  @protected
  AccountUpdate dco_decode_box_autoadd_account_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_account_update(raw);
  }

  @protected
  BroadcastTransaction dco_decode_box_autoadd_broadcast_transaction(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_broadcast_transaction(raw);
  }

  @protected
  DeviceStatus dco_decode_box_autoadd_device_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_device_status(raw);
  }

  @protected
  EnvoyMessage dco_decode_box_autoadd_envoy_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_envoy_message(raw);
  }

  @protected
  EnvoyStatus dco_decode_box_autoadd_envoy_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_envoy_status(raw);
  }

  @protected
  ExchangeRate dco_decode_box_autoadd_exchange_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_exchange_rate(raw);
  }

  @protected
  FirmwarePayload dco_decode_box_autoadd_firmware_payload(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_firmware_payload(raw);
  }

  @protected
  FirmwareUpdate dco_decode_box_autoadd_firmware_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_firmware_update(raw);
  }

  @protected
  PairingRequest dco_decode_box_autoadd_pairing_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pairing_request(raw);
  }

  @protected
  PairingResponse dco_decode_box_autoadd_pairing_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_pairing_response(raw);
  }

  @protected
  PassportMessage dco_decode_box_autoadd_passport_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_passport_message(raw);
  }

  @protected
  SecurityChallengeMessage dco_decode_box_autoadd_security_challenge_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_security_challenge_message(raw);
  }

  @protected
  SecurityProofMessage dco_decode_box_autoadd_security_proof_message(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_security_proof_message(raw);
  }

  @protected
  SignPsbt dco_decode_box_autoadd_sign_psbt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_sign_psbt(raw);
  }

  @protected
  BroadcastTransaction dco_decode_broadcast_transaction(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BroadcastTransaction(
      accountId: dco_decode_String(arr[0]),
      psbt: dco_decode_String(arr[1]),
    );
  }

  @protected
  DecoderStatus dco_decode_decoder_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DecoderStatus(
      progress: dco_decode_f_64(arr[0]),
      payload: dco_decode_opt_box_autoadd_passport_message(arr[1]),
    );
  }

  @protected
  DeviceState dco_decode_device_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return DeviceState.values[raw as int];
  }

  @protected
  DeviceStatus dco_decode_device_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return DeviceStatus(
      state: dco_decode_device_state(arr[0]),
      batteryLevel: dco_decode_u_8(arr[1]),
      bleSignal: dco_decode_i_8(arr[2]),
      version: dco_decode_String(arr[3]),
    );
  }

  @protected
  EnvoyMessage dco_decode_envoy_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EnvoyMessage(
      message: dco_decode_quantum_link_message(arr[0]),
      timestamp: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  EnvoyState dco_decode_envoy_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EnvoyState.values[raw as int];
  }

  @protected
  EnvoyStatus dco_decode_envoy_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return EnvoyStatus(
      state: dco_decode_envoy_state(arr[0]),
      version: dco_decode_String(arr[1]),
    );
  }

  @protected
  ExchangeRate dco_decode_exchange_rate(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return ExchangeRate(
      currencyCode: dco_decode_String(arr[0]),
      rate: dco_decode_f_32(arr[1]),
    );
  }

  @protected
  double dco_decode_f_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FirmwarePayload dco_decode_firmware_payload(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FirmwarePayload(
      payload: dco_decode_list_prim_u_8_strict(arr[0]),
    );
  }

  @protected
  FirmwareUpdate dco_decode_firmware_update(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return FirmwareUpdate(
      version: dco_decode_String(arr[0]),
      timestamp: dco_decode_u_32(arr[1]),
      changelog: dco_decode_String(arr[2]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  OnboardingState dco_decode_onboarding_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OnboardingState.values[raw as int];
  }

  @protected
  XidDocument?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
            raw);
  }

  @protected
  PassportMessage? dco_decode_opt_box_autoadd_passport_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_passport_message(raw);
  }

  @protected
  PairingRequest dco_decode_pairing_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PairingRequest(
      xidDocument: dco_decode_list_prim_u_8_strict(arr[0]),
    );
  }

  @protected
  PairingResponse dco_decode_pairing_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return PairingResponse(
      passportModel: dco_decode_passport_model(arr[0]),
      passportFirmwareVersion: dco_decode_passport_firmware_version(arr[1]),
      passportSerial: dco_decode_passport_serial(arr[2]),
      descriptor: dco_decode_String(arr[3]),
    );
  }

  @protected
  PassportFirmwareVersion dco_decode_passport_firmware_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PassportFirmwareVersion(
      field0: dco_decode_String(arr[0]),
    );
  }

  @protected
  PassportMessage dco_decode_passport_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return PassportMessage(
      message: dco_decode_quantum_link_message(arr[0]),
      status: dco_decode_device_status(arr[1]),
    );
  }

  @protected
  PassportModel dco_decode_passport_model(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PassportModel.values[raw as int];
  }

  @protected
  PassportSerial dco_decode_passport_serial(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return PassportSerial(
      field0: dco_decode_String(arr[0]),
    );
  }

  @protected
  QrDecoderStatus dco_decode_qr_decoder_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return QrDecoderStatus(
      progress: dco_decode_f_64(arr[0]),
      payload:
          dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
              arr[1]),
    );
  }

  @protected
  QuantumLinkMessage dco_decode_quantum_link_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return QuantumLinkMessage_ExchangeRate(
          dco_decode_box_autoadd_exchange_rate(raw[1]),
        );
      case 1:
        return QuantumLinkMessage_FirmwareUpdate(
          dco_decode_box_autoadd_firmware_update(raw[1]),
        );
      case 2:
        return QuantumLinkMessage_DeviceStatus(
          dco_decode_box_autoadd_device_status(raw[1]),
        );
      case 3:
        return QuantumLinkMessage_EnvoyStatus(
          dco_decode_box_autoadd_envoy_status(raw[1]),
        );
      case 4:
        return QuantumLinkMessage_PairingResponse(
          dco_decode_box_autoadd_pairing_response(raw[1]),
        );
      case 5:
        return QuantumLinkMessage_PairingRequest(
          dco_decode_box_autoadd_pairing_request(raw[1]),
        );
      case 6:
        return QuantumLinkMessage_OnboardingState(
          dco_decode_onboarding_state(raw[1]),
        );
      case 7:
        return QuantumLinkMessage_SignPsbt(
          dco_decode_box_autoadd_sign_psbt(raw[1]),
        );
      case 8:
        return QuantumLinkMessage_AccountUpdate(
          dco_decode_box_autoadd_account_update(raw[1]),
        );
      case 9:
        return QuantumLinkMessage_FirmwarePayload(
          dco_decode_box_autoadd_firmware_payload(raw[1]),
        );
      case 10:
        return QuantumLinkMessage_BroadcastTransaction(
          dco_decode_box_autoadd_broadcast_transaction(raw[1]),
        );
      case 11:
        return QuantumLinkMessage_SecurityChallengeMessage(
          dco_decode_box_autoadd_security_challenge_message(raw[1]),
        );
      case 12:
        return QuantumLinkMessage_SecurityProofMessage(
          dco_decode_box_autoadd_security_proof_message(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  SecurityChallengeMessage dco_decode_security_challenge_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SecurityChallengeMessage(
      data: dco_decode_list_prim_u_8_strict(arr[0]),
    );
  }

  @protected
  SecurityProofMessage dco_decode_security_proof_message(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return SecurityProofMessage(
      data: dco_decode_list_prim_u_8_strict(arr[0]),
    );
  }

  @protected
  SignPsbt dco_decode_sign_psbt(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return SignPsbt(
      accountId: dco_decode_String(arr[0]),
      psbt: dco_decode_String(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcMutexDecoder
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcMutexDecoderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Dechunker
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DechunkerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  QuantumLinkIdentity
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuantumLinkIdentityImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XidDocument
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XidDocumentImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Dechunker
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DechunkerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcMutexDecoder
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcMutexDecoderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  QuantumLinkIdentity
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuantumLinkIdentityImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XidDocument
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XidDocumentImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcMutexDecoder
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcMutexDecoderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Dechunker
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return DechunkerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  QuantumLinkIdentity
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return QuantumLinkIdentityImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  XidDocument
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return XidDocumentImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AccountUpdate sse_decode_account_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_accountId = sse_decode_String(deserializer);
    var var_update = sse_decode_list_prim_u_8_strict(deserializer);
    return AccountUpdate(accountId: var_accountId, update: var_update);
  }

  @protected
  XidDocument
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        deserializer));
  }

  @protected
  AccountUpdate sse_decode_box_autoadd_account_update(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_account_update(deserializer));
  }

  @protected
  BroadcastTransaction sse_decode_box_autoadd_broadcast_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_broadcast_transaction(deserializer));
  }

  @protected
  DeviceStatus sse_decode_box_autoadd_device_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_device_status(deserializer));
  }

  @protected
  EnvoyMessage sse_decode_box_autoadd_envoy_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_envoy_message(deserializer));
  }

  @protected
  EnvoyStatus sse_decode_box_autoadd_envoy_status(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_envoy_status(deserializer));
  }

  @protected
  ExchangeRate sse_decode_box_autoadd_exchange_rate(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_exchange_rate(deserializer));
  }

  @protected
  FirmwarePayload sse_decode_box_autoadd_firmware_payload(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_firmware_payload(deserializer));
  }

  @protected
  FirmwareUpdate sse_decode_box_autoadd_firmware_update(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_firmware_update(deserializer));
  }

  @protected
  PairingRequest sse_decode_box_autoadd_pairing_request(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pairing_request(deserializer));
  }

  @protected
  PairingResponse sse_decode_box_autoadd_pairing_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_pairing_response(deserializer));
  }

  @protected
  PassportMessage sse_decode_box_autoadd_passport_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_passport_message(deserializer));
  }

  @protected
  SecurityChallengeMessage sse_decode_box_autoadd_security_challenge_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_security_challenge_message(deserializer));
  }

  @protected
  SecurityProofMessage sse_decode_box_autoadd_security_proof_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_security_proof_message(deserializer));
  }

  @protected
  SignPsbt sse_decode_box_autoadd_sign_psbt(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_sign_psbt(deserializer));
  }

  @protected
  BroadcastTransaction sse_decode_broadcast_transaction(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_accountId = sse_decode_String(deserializer);
    var var_psbt = sse_decode_String(deserializer);
    return BroadcastTransaction(accountId: var_accountId, psbt: var_psbt);
  }

  @protected
  DecoderStatus sse_decode_decoder_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_progress = sse_decode_f_64(deserializer);
    var var_payload = sse_decode_opt_box_autoadd_passport_message(deserializer);
    return DecoderStatus(progress: var_progress, payload: var_payload);
  }

  @protected
  DeviceState sse_decode_device_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return DeviceState.values[inner];
  }

  @protected
  DeviceStatus sse_decode_device_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_state = sse_decode_device_state(deserializer);
    var var_batteryLevel = sse_decode_u_8(deserializer);
    var var_bleSignal = sse_decode_i_8(deserializer);
    var var_version = sse_decode_String(deserializer);
    return DeviceStatus(
        state: var_state,
        batteryLevel: var_batteryLevel,
        bleSignal: var_bleSignal,
        version: var_version);
  }

  @protected
  EnvoyMessage sse_decode_envoy_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_quantum_link_message(deserializer);
    var var_timestamp = sse_decode_u_32(deserializer);
    return EnvoyMessage(message: var_message, timestamp: var_timestamp);
  }

  @protected
  EnvoyState sse_decode_envoy_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return EnvoyState.values[inner];
  }

  @protected
  EnvoyStatus sse_decode_envoy_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_state = sse_decode_envoy_state(deserializer);
    var var_version = sse_decode_String(deserializer);
    return EnvoyStatus(state: var_state, version: var_version);
  }

  @protected
  ExchangeRate sse_decode_exchange_rate(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_currencyCode = sse_decode_String(deserializer);
    var var_rate = sse_decode_f_32(deserializer);
    return ExchangeRate(currencyCode: var_currencyCode, rate: var_rate);
  }

  @protected
  double sse_decode_f_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat32();
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FirmwarePayload sse_decode_firmware_payload(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_payload = sse_decode_list_prim_u_8_strict(deserializer);
    return FirmwarePayload(payload: var_payload);
  }

  @protected
  FirmwareUpdate sse_decode_firmware_update(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_version = sse_decode_String(deserializer);
    var var_timestamp = sse_decode_u_32(deserializer);
    var var_changelog = sse_decode_String(deserializer);
    return FirmwareUpdate(
        version: var_version,
        timestamp: var_timestamp,
        changelog: var_changelog);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt8();
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  OnboardingState sse_decode_onboarding_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return OnboardingState.values[inner];
  }

  @protected
  XidDocument?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  PassportMessage? sse_decode_opt_box_autoadd_passport_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_passport_message(deserializer));
    } else {
      return null;
    }
  }

  @protected
  PairingRequest sse_decode_pairing_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_xidDocument = sse_decode_list_prim_u_8_strict(deserializer);
    return PairingRequest(xidDocument: var_xidDocument);
  }

  @protected
  PairingResponse sse_decode_pairing_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_passportModel = sse_decode_passport_model(deserializer);
    var var_passportFirmwareVersion =
        sse_decode_passport_firmware_version(deserializer);
    var var_passportSerial = sse_decode_passport_serial(deserializer);
    var var_descriptor = sse_decode_String(deserializer);
    return PairingResponse(
        passportModel: var_passportModel,
        passportFirmwareVersion: var_passportFirmwareVersion,
        passportSerial: var_passportSerial,
        descriptor: var_descriptor);
  }

  @protected
  PassportFirmwareVersion sse_decode_passport_firmware_version(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    return PassportFirmwareVersion(field0: var_field0);
  }

  @protected
  PassportMessage sse_decode_passport_message(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_message = sse_decode_quantum_link_message(deserializer);
    var var_status = sse_decode_device_status(deserializer);
    return PassportMessage(message: var_message, status: var_status);
  }

  @protected
  PassportModel sse_decode_passport_model(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return PassportModel.values[inner];
  }

  @protected
  PassportSerial sse_decode_passport_serial(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    return PassportSerial(field0: var_field0);
  }

  @protected
  QrDecoderStatus sse_decode_qr_decoder_status(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_progress = sse_decode_f_64(deserializer);
    var var_payload =
        sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
            deserializer);
    return QrDecoderStatus(progress: var_progress, payload: var_payload);
  }

  @protected
  QuantumLinkMessage sse_decode_quantum_link_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_exchange_rate(deserializer);
        return QuantumLinkMessage_ExchangeRate(var_field0);
      case 1:
        var var_field0 = sse_decode_box_autoadd_firmware_update(deserializer);
        return QuantumLinkMessage_FirmwareUpdate(var_field0);
      case 2:
        var var_field0 = sse_decode_box_autoadd_device_status(deserializer);
        return QuantumLinkMessage_DeviceStatus(var_field0);
      case 3:
        var var_field0 = sse_decode_box_autoadd_envoy_status(deserializer);
        return QuantumLinkMessage_EnvoyStatus(var_field0);
      case 4:
        var var_field0 = sse_decode_box_autoadd_pairing_response(deserializer);
        return QuantumLinkMessage_PairingResponse(var_field0);
      case 5:
        var var_field0 = sse_decode_box_autoadd_pairing_request(deserializer);
        return QuantumLinkMessage_PairingRequest(var_field0);
      case 6:
        var var_field0 = sse_decode_onboarding_state(deserializer);
        return QuantumLinkMessage_OnboardingState(var_field0);
      case 7:
        var var_field0 = sse_decode_box_autoadd_sign_psbt(deserializer);
        return QuantumLinkMessage_SignPsbt(var_field0);
      case 8:
        var var_field0 = sse_decode_box_autoadd_account_update(deserializer);
        return QuantumLinkMessage_AccountUpdate(var_field0);
      case 9:
        var var_field0 = sse_decode_box_autoadd_firmware_payload(deserializer);
        return QuantumLinkMessage_FirmwarePayload(var_field0);
      case 10:
        var var_field0 =
            sse_decode_box_autoadd_broadcast_transaction(deserializer);
        return QuantumLinkMessage_BroadcastTransaction(var_field0);
      case 11:
        var var_field0 =
            sse_decode_box_autoadd_security_challenge_message(deserializer);
        return QuantumLinkMessage_SecurityChallengeMessage(var_field0);
      case 12:
        var var_field0 =
            sse_decode_box_autoadd_security_proof_message(deserializer);
        return QuantumLinkMessage_SecurityProofMessage(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  SecurityChallengeMessage sse_decode_security_challenge_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    return SecurityChallengeMessage(data: var_data);
  }

  @protected
  SecurityProofMessage sse_decode_security_proof_message(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_data = sse_decode_list_prim_u_8_strict(deserializer);
    return SecurityProofMessage(data: var_data);
  }

  @protected
  SignPsbt sse_decode_sign_psbt(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_accountId = sse_decode_String(deserializer);
    var var_psbt = sse_decode_String(deserializer);
    return SignPsbt(accountId: var_accountId, psbt: var_psbt);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          ArcMutexDecoder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcMutexDecoderImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          Dechunker self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DechunkerImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          QuantumLinkIdentity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as QuantumLinkIdentityImpl).frbInternalSseEncode(move: true),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          XidDocument self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XidDocumentImpl).frbInternalSseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          Dechunker self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DechunkerImpl).frbInternalSseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          ArcMutexDecoder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcMutexDecoderImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          QuantumLinkIdentity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as QuantumLinkIdentityImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          XidDocument self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XidDocumentImpl).frbInternalSseEncode(move: false),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcMutexDecoder(
          ArcMutexDecoder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcMutexDecoderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
          Dechunker self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as DechunkerImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
          QuantumLinkIdentity self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as QuantumLinkIdentityImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          XidDocument self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as XidDocumentImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_account_update(AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.accountId, serializer);
    sse_encode_list_prim_u_8_strict(self.update, serializer);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          XidDocument self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_account_update(
      AccountUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_account_update(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_broadcast_transaction(
      BroadcastTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_broadcast_transaction(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_device_status(
      DeviceStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_device_status(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_envoy_message(
      EnvoyMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_envoy_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_envoy_status(
      EnvoyStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_envoy_status(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_exchange_rate(
      ExchangeRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_exchange_rate(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_firmware_payload(
      FirmwarePayload self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_firmware_payload(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_firmware_update(
      FirmwareUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_firmware_update(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pairing_request(
      PairingRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pairing_request(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_pairing_response(
      PairingResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_pairing_response(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_passport_message(
      PassportMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_passport_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_security_challenge_message(
      SecurityChallengeMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_security_challenge_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_security_proof_message(
      SecurityProofMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_security_proof_message(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_sign_psbt(
      SignPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_sign_psbt(self, serializer);
  }

  @protected
  void sse_encode_broadcast_transaction(
      BroadcastTransaction self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.accountId, serializer);
    sse_encode_String(self.psbt, serializer);
  }

  @protected
  void sse_encode_decoder_status(DecoderStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.progress, serializer);
    sse_encode_opt_box_autoadd_passport_message(self.payload, serializer);
  }

  @protected
  void sse_encode_device_state(DeviceState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_device_status(DeviceStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_device_state(self.state, serializer);
    sse_encode_u_8(self.batteryLevel, serializer);
    sse_encode_i_8(self.bleSignal, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_envoy_message(EnvoyMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quantum_link_message(self.message, serializer);
    sse_encode_u_32(self.timestamp, serializer);
  }

  @protected
  void sse_encode_envoy_state(EnvoyState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_envoy_status(EnvoyStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_envoy_state(self.state, serializer);
    sse_encode_String(self.version, serializer);
  }

  @protected
  void sse_encode_exchange_rate(ExchangeRate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.currencyCode, serializer);
    sse_encode_f_32(self.rate, serializer);
  }

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat32(self);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_firmware_payload(
      FirmwarePayload self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.payload, serializer);
  }

  @protected
  void sse_encode_firmware_update(
      FirmwareUpdate self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.version, serializer);
    sse_encode_u_32(self.timestamp, serializer);
    sse_encode_String(self.changelog, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt8(self);
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_onboarding_state(
      OnboardingState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          XidDocument? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
          self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_passport_message(
      PassportMessage? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_passport_message(self, serializer);
    }
  }

  @protected
  void sse_encode_pairing_request(
      PairingRequest self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.xidDocument, serializer);
  }

  @protected
  void sse_encode_pairing_response(
      PairingResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_passport_model(self.passportModel, serializer);
    sse_encode_passport_firmware_version(
        self.passportFirmwareVersion, serializer);
    sse_encode_passport_serial(self.passportSerial, serializer);
    sse_encode_String(self.descriptor, serializer);
  }

  @protected
  void sse_encode_passport_firmware_version(
      PassportFirmwareVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
  }

  @protected
  void sse_encode_passport_message(
      PassportMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_quantum_link_message(self.message, serializer);
    sse_encode_device_status(self.status, serializer);
  }

  @protected
  void sse_encode_passport_model(PassportModel self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_passport_serial(
      PassportSerial self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.field0, serializer);
  }

  @protected
  void sse_encode_qr_decoder_status(
      QrDecoderStatus self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self.progress, serializer);
    sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        self.payload, serializer);
  }

  @protected
  void sse_encode_quantum_link_message(
      QuantumLinkMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case QuantumLinkMessage_ExchangeRate(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_exchange_rate(field0, serializer);
      case QuantumLinkMessage_FirmwareUpdate(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_firmware_update(field0, serializer);
      case QuantumLinkMessage_DeviceStatus(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_device_status(field0, serializer);
      case QuantumLinkMessage_EnvoyStatus(field0: final field0):
        sse_encode_i_32(3, serializer);
        sse_encode_box_autoadd_envoy_status(field0, serializer);
      case QuantumLinkMessage_PairingResponse(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_box_autoadd_pairing_response(field0, serializer);
      case QuantumLinkMessage_PairingRequest(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_box_autoadd_pairing_request(field0, serializer);
      case QuantumLinkMessage_OnboardingState(field0: final field0):
        sse_encode_i_32(6, serializer);
        sse_encode_onboarding_state(field0, serializer);
      case QuantumLinkMessage_SignPsbt(field0: final field0):
        sse_encode_i_32(7, serializer);
        sse_encode_box_autoadd_sign_psbt(field0, serializer);
      case QuantumLinkMessage_AccountUpdate(field0: final field0):
        sse_encode_i_32(8, serializer);
        sse_encode_box_autoadd_account_update(field0, serializer);
      case QuantumLinkMessage_FirmwarePayload(field0: final field0):
        sse_encode_i_32(9, serializer);
        sse_encode_box_autoadd_firmware_payload(field0, serializer);
      case QuantumLinkMessage_BroadcastTransaction(field0: final field0):
        sse_encode_i_32(10, serializer);
        sse_encode_box_autoadd_broadcast_transaction(field0, serializer);
      case QuantumLinkMessage_SecurityChallengeMessage(field0: final field0):
        sse_encode_i_32(11, serializer);
        sse_encode_box_autoadd_security_challenge_message(field0, serializer);
      case QuantumLinkMessage_SecurityProofMessage(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_box_autoadd_security_proof_message(field0, serializer);
    }
  }

  @protected
  void sse_encode_security_challenge_message(
      SecurityChallengeMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.data, serializer);
  }

  @protected
  void sse_encode_security_proof_message(
      SecurityProofMessage self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.data, serializer);
  }

  @protected
  void sse_encode_sign_psbt(SignPsbt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.accountId, serializer);
    sse_encode_String(self.psbt, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }
}

@sealed
class ArcMutexDecoderImpl extends RustOpaque implements ArcMutexDecoder {
  // Not to be used by end users
  ArcMutexDecoderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcMutexDecoderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ArcMutexDecoder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcMutexDecoder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ArcMutexDecoderPtr,
  );
}

@sealed
class DechunkerImpl extends RustOpaque implements Dechunker {
  // Not to be used by end users
  DechunkerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  DechunkerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Dechunker,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Dechunker,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_DechunkerPtr,
  );
}

@sealed
class QuantumLinkIdentityImpl extends RustOpaque
    implements QuantumLinkIdentity {
  // Not to be used by end users
  QuantumLinkIdentityImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  QuantumLinkIdentityImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_QuantumLinkIdentity,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_QuantumLinkIdentity,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_QuantumLinkIdentityPtr,
  );
}

@sealed
class XidDocumentImpl extends RustOpaque implements XidDocument {
  // Not to be used by end users
  XidDocumentImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  XidDocumentImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_XidDocument,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_XidDocument,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_XidDocumentPtr,
  );
}
