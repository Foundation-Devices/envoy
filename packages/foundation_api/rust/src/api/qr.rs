use bc_envelope::base::envelope;
use bc_envelope::prelude::*;
use bc_ur::URType;
use flutter_rust_bridge::for_generated::anyhow;
use foundation_api::discovery::Discovery;
use foundation_ur::{Decoder, UR};

#[flutter_rust_bridge::frb(sync)] // Synchronous mode for simplicity of the demo
pub fn greet(name: String) -> String {
    format!("Hello, {name}!")
}

#[flutter_rust_bridge::frb(init)]
pub fn init_app() {
    flutter_rust_bridge::setup_default_user_utils();
}

pub async fn get_decoder() -> MultipartDecoder {
    MultipartDecoder::new()
}

pub struct DecoderStatus {
    pub progress: f64,
    pub payload: Option<Envelope>,
}

pub async fn decode_qr(
    qr: String,
    decoder: &mut MultipartDecoder,
) -> anyhow::Result<DecoderStatus> {
    decoder.receive(&*qr)?;

    register_tags();
    if decoder.is_complete() {
        let ur = decoder.message()?.unwrap();
        let envelope = Envelope::from_ur(ur)?;

        return Ok(DecoderStatus {
            progress: 1.0,
            payload: Some(envelope),
        });
    }

    Ok(DecoderStatus {
        progress: 0.5,
        payload: None,
    })
}

// Only after user presses 'continue'
pub async fn pair_device(envelope: Envelope) -> anyhow::Result<Discovery> {
    println!("{}", envelope.format_flat());

    let inner = envelope.unwrap_envelope()?.unwrap_envelope()?;
    register_tags();
    let expression = Expression::try_from(inner)?;
    let discovery = Discovery::try_from(expression)?;

    Ok(discovery)
}

#[cfg(test)]
mod tests {
    use super::*;
    use anyhow::Result;
    use tokio::test;

    fn get_test_array() -> Vec<String> {
        vec!(
            "ur:envelope/1-16/lpadbecfbggdcyemckteamhkaddatpsplftpsplstpsotansfginieinjkiajlkoihjpkkoytpsotansfliyjkihjtieihjplftpsotanshdhdcxryvtspghldmotnlbcadebsmntbiysolkcehfcmdljlmhledeatmskpjphhfwdneooyaylftpsotansgylftanshftanspdlfaohkahcxnnhgwtbgmubbckbdrnwpgwtiskcffemyzsmhaxrtutpacmrkvybzcykbneehdmlogywfpkfnoshsgaftzojeuowkbnotbbtasttbmtrhwmtosnflynioaybnzekgimjopdzeksdajpjznymuetstrhzosboneysebkrdpalffmtputpsestkhtfyuojtnydrpmcwlfmnurolfrgwwppekevsuyfldyndprmwjloxglrobgdmmdksfrdalrmddmaddecpetpsmyvwvwykbsnshgtefzlkyloyzczoplsngrwzvykigmgwpabyglgysgsssefwcerspysogapytbisgwkgkbbtgrtycmynlsrfbbvlfdykbtdinyiddmeeglataeioaymyltuyvseswepasa".to_string(),
            "ur:envelope/2-16/lpaobecfbggdcyemckteamhkaddafzyldrjkkoiopawldltbknfwdeltienlhgjnlrytayeszeftnsswjkwksakneomecpntbdlndmdkvaskntlfjzweiddirfrfndesmessyauylkfmltaastplknbsfszmhdprrybennltcxaheoetglgwottigydygagsmedwvegllfjsretlkeemcfloswsfpttkdkvwtaamimfnprmobngamwfphhndisrlpkvyieztenckwpsaykttkbengrwzueidvsglfwltgyghhsltnehefdbzlpmyylrpatzmpejnvwkeuocxamremoechgldtboyjkosdnfdhyzomkpsfnhyfzgebgcmhgfwkbjzfxoycaecveamhetbkouykbmningspfpaytwfadionybwsfnsnedngdkszmjsfmvevtpsvebtutyazsmycpgypevyvwlggutirhuyennsssrehpmylyrpfgrfmylrclnbrowereyljnksptoewfuocanlqzpsfdwemdvssnlssfgeuezcdnwdsgsnctvdykvwcsylpdislnbntllfmtimbdhltponiyfewpjltenecy".to_string(),
            "ur:envelope/3-16/lpaxbecfbggdcyemckteamhkaddamhayamlknsheaanbihfywkahpldpbzzozegaaahncwdrlrldhdemkemsplgeuoiddrlbpfjycyzcfmzcaxtsiyryiabsgyjkmejldipsftlnhgmyetoyfzsppfkgadtlnslakbwzgocemnzsiakbhptokkykvtcpuovyqzurbyfnpdzsspgagubnmhintpvshdbdmdjeftvswzmyztwngusbnytdwyweutkosaoywzlbzochmorohdwtkipejpissbmebepthegtrhzmskrhjpierhcftentjlahveotdyecldmhhhoydteydatntslksbzenntbeeadiacyoxfsdygrmudigtaehggrspptheztlbhpmdvyjnbglbhkoxamvsfxhhcsyaltjpgrsamybecxnlecpmrsmnuednjnsgyagtbtfpylpmjopehloenldtoyehbbwffrcswknsftpfbsbsrllbglrlnswplbhyidfpenwkvojsasahambsnnchdwdpfnhftnenstvogdesmsknrpiyotdmecrlhdrdaddwoebybzsfhemheonscagmasaotpclhhtbmega".to_string(),
            "ur:envelope/4-16/lpaabecfbggdcyemckteamhkaddadpgdzczebestdyckdnidyllkaymdnnytpkgwwzluswbwmketylesmyylzepfidrowzgakbcakkmnspsebsaeurinssldfthfcmotyktygomytndwrspandnyrhwygwparfhgsstnvdetenuyeceoueurrkveurdnoennkbmuotiycfbzaemwmsclckdegmtomwaywndajpaagemnyacyeegtzmdajogrvdswgymsaeamadtdenrtlpwmrtrtdstshlryjtdmfscngsrktabzotehtefdotjphgdlmnderkzmbyeynnurfhwnwtcyregmfryluetkoeaxsfzsdkttkkssaezsnydicnbgtdlbregwmyzovlmwkpfgldvegminsplbhsdlwmaybzenwdfpdpaxdehhksspmtkbmygaathgbekgdevwgsyamuidtsmywtkpotfnfyzsmslocfnyjoaolrfdnlfttdhggelriytahsbnwmcwhhfrhgbeyagtjzhesolstisrzsgopkykwyferosovdeymtuypamhsgatvosslpjngholbavehespcmcteebznytsuehput".to_string(),
            "ur:envelope/5-16/lpahbecfbggdcyemckteamhkaddaislniofrlodedlpawlbydpeogmglsflgiszezsvwvacygwayjojtcmfymshsbdvekglrbstsatlkidbekistlkbzwljotkcsbtgrchmsflecrfmksgjocmjeuybnwndygtstonjogreomsinstuelytojnksprgdpfknsbwtcmbnwflygegagodphdeyzedwhnqdayleamdrmhpylflystsszogtsfzekovywphnatgyhdtpehytsttnzoeslfdighbdztloltmulnsbpfsthkdezmwpisfgkbfsretifnwkosghdymswllyylzepkvymtaygufdtegmwkhladfsbaamndsnyncsndheoywybycaetghcafthhvolbwsneykztoyaoftisdysgehdprywshgolttcysbpradkplrdtmwztzmgebnemvseevymutoaownlglnttonglvaaxbdtansonlfcfaoaehkaxcxrnecbginghhypkfnrlprfghlkncysfgdnsaxjsswsgbtkojlluttfpcszsdynnfxgtynksrszoihmdgseoehdplneoaahhglonwtutmoes".to_string(),
            "ur:envelope/6-16/lpambecfbggdcyemckteamhkaddakkskaoynhswmbgoyvtrflgcyaakbwfjpdnrdemssgtyalbbaoxdrrnzsgesftdrdhsdslrttwzadnlktidinjsaauraedyectdnetscsdwkiieiypyiadeaddypytbstsgoygelsspuofnasondkgwbylyleltemhgcfhpihcncpattthtesdramoydaskguztfxlpksbnpavsckjycxpdlechlgclnlknbamwfnkilrhfoeonsnwdoscabnsraadmiapafdkogogrpddmhdluoeryykbsnyndmyatsfbzbnrfgeythfnsrseoprknrtclgmkorkkbahhfvalamthyghesflghhnspyaoxjnpdlddrtsrdhgtalekiwzpylflunbcnesmyierlhplsjzswgydakpwynbmtpmbwlysgdyjzbtcsdswyfrfrsortgrcnfgfynsttftyaleiatihhgursltfzfgmohgdmvdgswtinhglevtlkgtlpdwjsoxhlbtzsiedrchltwzcnlgfzhgswtkrkrewkwzioproectdwdagoytnlosbssggwctcwenseksdspdnlrpjs".to_string(),
            "ur:envelope/7-16/lpatbecfbggdcyemckteamhkaddabzsrbgbnmoamstaddnwdvogrneltkbwnfdjlwlbwadamwpjztsiepdterkckpkayolreptsphljyfdfwsaqdbwwlfymohhfwotdypfkgdwbefpltnbcfjomnhtynfxvdmwkblehkpdpmtyfpiabnoevdehhfgweojsmhkgietdmwskcnrkethtwnkkfxjpbkfrskotjpcwclnseyclwtlepldkhklgesdtctbaqzeodrwkmtpfwkjesaldmtoeuyclglotkkcpinfwmdhnmyneftihwsktpycxmtlfhngrgewerehpskbwntrlrdpemsknsohfhgrekbtynnteltkeamamchcyrefgtypaguotlylgfsksneptfehfutoeptspahkkrkfllffwsfrhtktetkecinfttbbwdposclpkkgolkpskhprlfwdenektwpehktlsjenektrpzoembkgdwnrhmeotfzdeyamoueksndksiekojyuopmcylkdapfmwfeoefeckpfykprzmadjobgmtcycyatdymefdotnbswahpfylpkbgbwladpqzehtesscfmyeeplenvwhn".to_string(),
            "ur:envelope/8-16/lpaybecfbggdcyemckteamhkaddaosbkseemfzwpfpfwrfhkflnsotlrmsmnnnvalsdtehpkdnhslgtapfcyadmkchzeptprlbnsdesbkpfzknvyrlcabglyaaaalgidzthsweveiosnfnlpztksidhdethpnsfpfgcpiytkdiaeletpistknsclmdaxynhtgeeeheftvwreiemulywdvsjtosprrdbzfrolytjsbztowfhejtdsaysoeciaetwmcnahwtjzfytpneuobygsjeltnshyssptmhndjppybnsgeejsesdikpdssgkiwsfnpmcmndeylkgsptfdfxsputfpvwgyndrskkoemuoycsfncsfgoytpsotansfljojkihjtieihjpfwjzihfpieiejpihjkjktpsolnadaoaxaaahamoyaxtpsotansghtansptlfaohkasjyvwhpfpislufrsnjocfksdplkcezohpesltwsdkbnpamyluwfwzvsnnseeslnlerfmngmflryksollrvtcflrhkcywkaskbbbuegownahrkmsfrnepkbwweiagydiemvotdtsprhyhnoxlrfnzogmdatlmotppfax".to_string(),
            "ur:envelope/9-16/lpasbecfbggdcyemckteamhkaddafwcelbrkghcpnsieihfdjkemlbmhjobnvyloaxkbjebgyntolklpmecxstjzehpkoxdkaajyhhrplotbtawetotddkzcfhesgdbsghbelecwrtndvafxdkgmiecswptdaxwpenotswvalffmlotyhetaehrtgobbzocnbkfrvywmpydkmslfhsbdlyadrksadtoeenykftetjzesossbehwslensamrdhyqdiyttflurwdbstotbpeztaogttlptdiztmwdsiyztrpmhbnkpwkytbwaddnwdndhfhnylmuhnlnlnjzrkcxlyaedkimkgnlhpjzdpbtzcknjzjpldcehfuegrlopefymhcwjkhpjktsttwlktfprebshlbskpvtvatinylrmturzmfrimhyiynlgetivwaypdvdhsrnpdkpbzswzodpheotimgupdsfwdkifmpslyinpapdtkeotbgdielabddsidlswpvyknoeisdninfdyljlvlbssepfolahqzkpcldpgwbnkoamqdylhyvysonlctbsuyyarsiystnyvodavttpdnensrinhsclfwettefwtdst".to_string(),
            "ur:envelope/10-16/lpbkbecfbggdcyemckteamhkaddagrwtrnrefzdimscejsbezobwenkgcphkaemycfwpasglwpsnaakpidwsplnyisdkeohsoehnuoprdiztuyemkkmofteomodwgaktvejkrprtaeiogykiyksbimglmefgkgfdgrdrmutkdslagrehltdtcwptmsndztadhlnsgrpkgtcartlycwztbnsprkwyoldnmtdaoylsmdtyspchgelprkswfgrtkknnoemddwtndsfmrhoxkpndrtdebzbnaeemcyjzvtotweahplbsaydicfgwdnasbwbdmobdpansbkstdaqztpndfwincfemhdoninrkzetohsaaeynbrpdlnlkplpuyjlaxcxrseykbkkpfnnptglhppfbkhkisbwcfdwvskprknnjeianecxlbmniefxaddknshewfcmvattrfqzwsynemylnbjskbdnimldctwsuodtzmfhcmditklnwndyesnsemceidbennqzoxvomocxurbgzsiyhertbnnyoejysaonykbwnbbzrsmdytwnndiscadwjokbdywnclfgpsaafnrppdsproktltbeyadladwnjefr".to_string(),
            "ur:envelope/11-16/lpbdbecfbggdcyemckteamhkaddapkknwzmwqzrncwbgisssbkwdihwkinrdplswinykgwcptspfneskcnfpntteftyndanbessblswycwptsattntvttbykfmhlgyknaxcafyyavtyltldlsnprtauelaleatksfllbsaidvsgukbndbkvwrduezsfgbdlfiaolptsowdlgswdtrocarptdyabdftesgwndkphpurrtchldrobgjepedluelaswhkfmckztptpysbynbwoytogacnhestdedytagdvlgatthffltaghiolgpmwnketsprltdetepdbyroimaefwaduonbzeuypklfvwbyttmtcmoxdevotsdybgcsehhymyihtehkbseytidmrhktoegsrhrdrfdibdimwpkodkfrkndpuoasjelpeshlfneccnhdrhjowlgyvtjytbgyvdkehltoaefmcekkbbswwdspssfzsbswndamfpplgazewlkkwtknkidlttamndglrhtidketiytdolfpeoswjotskevssbcxpmlpotjtdwaodetodrnytlbyjtdibnfppmttwljzwffxbakglshswdwdrehd".to_string(),
            "ur:envelope/12-16/lpbnbecfbggdcyemckteamhkaddamuhscklkdeisnersbtpmjytemehpwldiylmnlkflihrldmgwsnpavwjsbeprzohdcfsrmojybklgpebzktenmsmkmhghgsdyvllbtdfplgsovlcxhtwelpfwgelpkootjybbesplrpgyhthekphnfmttguflkichhfrebylrvaaoykhgclmwdeoxcwmwdkesstletpneialslutalardjkrtwkiydlmulacnkscnvydmtdvtbtfedtihgreshflatdrfvlhsjojnfstdmhmuutktcpflkgaacmmetywkbazodpmocfhnflztfschpfmyfstdmhjkcpecvlpfketpchwyryotprlezornzeihqzguceosjekkjefpvsmkndmkfwuytkdsknsnoxlttliohlnbgrdmtioxbnhywdgukpttlulphlknuycxsagmlfiabdlsrfktdlpygybbkkesdrcfuewdhedspmwfvwndkswslufmpsfztnndkictnlolrsdaknbdqdeoaostfpaxdeflvtenjtwmctkscwdmlrvsimnbatluaytnfnhkhgkoiyfwfxjsmhosoyhndy".to_string(),
            "ur:envelope/13-16/lpbtbecfbggdcyemckteamhkaddanbpsrpcywmcwnsnnisrpfzsrctwetordztwmpewnhhhnjzonttfnvytafzurlebngsbwbyoxrtfzoyhfpamuseayotbedtgaryhhmtmtiaosprwmbtfepmieidtlkoidoxmuztwpatylnypkateygmoyvarffdueeyutoemkdwehhpfwfybyaeknhgbglndydtaobgbncwkildtpgmoywptswdamfrvtfwhsfswerewfjonslnlbrfmklenloynshsfxlfehsahpskrkpmsomypslsfncsdlnypkamdslyhytbsgvsdsaordaykoahdyjlfnutmocsrdgdsafgktjljpjslffshtskutbyberhglytzegridskhlzoeeswyapfgokprfgoimetdepfnydawtprwfbacfswbaehhgwzdlgszsgrreoltbbsnycseovwsfinrdgrnecydtoxkpvswmdltbzsjlpdaodihedpmkktrfjptohfpmfshlwkiobsdkcxenoezocswdcxhsgytaecaeuepfyanevloxnncwvteyisemvadrlyweprgdgoqdlylukelkmkmdfw".to_string(),
            "ur:envelope/14-16/lpbabecfbggdcyemckteamhkaddaihotkonbverpcncerhjnteneswoeenfxtbgudyhnwsledlgebtnyvetbhprnwlhhjootrkjlisqdgucsmhzcdkskptndfrmhemtnvevyayylvltszobkcsimrfkefnatoecwtnswpsisktgeeotbfnaedlgeehrkptwlwywlaorsmegttbtypsrdwkjthebkftfwpltitdbeamolrhaofhoeameypsemnbwdkgwmfhpytaamzetnckmedkmuwnylsesphnutrpdpqdrhsbieihvopmsbkplrfhbetomhhtammtclghcybwfyidmomozmaaeefdvastmsgeskglfgzcqzvlttbdhkhgasdirsndksbefzbdmnbgfygdmkaxlagojsmncmdyosfmprdpmyeedtluenuykiisjopabtzsbakklyptvlvyhlsanbwflaynisgotafndedmcpsbbdwzflfyctkivdhlfmhplglkplcsfnsegrcaflgassaoltwlvoctvaksloplmevdpstnsgurhtghclmkndoyrybdnejylpueenjllrkgmoswonzoyttiwfsgmsktrnes".to_string(),
            "ur:envelope/15-16/lpbsbecfbggdcyemckteamhkaddamkhylpbkldjohnwpmtmnrylngddywdrockcftptklfvtfeknrojyvscsgelndeaxsajtcnsbwdreiecabsdidroeecdpgdredardrlflieprcpssjtlooljzhhdrwefsfnfxwpietpfxamglbkrfahsfbscyvyoyrscwgyhdhtsrkstkzcpmbyasolaxgubdnljklordksechthnyawegyisylfygaecdsdikijzcnemhshyrdihtneyimqdlsesrlbtsetdrnswhfchlpbkatwdidltkpfhrktehpsrjlioeotapknnntlteycmcnpelgdtjsrdolperkdrtecmgyjkgeihpthgfhgdvdfsoxuymyihaacnwkoeyltoaxlybdfyrtkktdlytpmsehahoyrtdybzehskietbgronwtjetaptmwlbjychbbbsutahiaiaskyazctbdpaydmglgutksghnhljeadhybnpduogtwetsckfxjswdlgrsrfskframmektmsfmbyesaxdliejprffefzfxnlgddsaxatprcmntdepfbelocfmykkoegurkjtmyckfpurtdzc".to_string(),
            "ur:envelope/16-16/lpbebecfbggdcyemckteamhkaddaylioingldpytcphltllfosenvdayplwlftsamkpajefglpiacwtkbgmkonclcfbzzefprprsflamenrncwbbswfrwerhhtmttdndhprlfgnngopskelyvozoetpdyarfoxrdgrsatpwtwdvojltdsfjyfmbyimdtpscmihjyaafmwdnnstlrotwngtjsaspamtbgidfyvoiolkcwjtredmfzbwmklftolytbroqdkglscmlaktkptipamelrvdwpyaetvofxzmtsjokegtfzmwswcxonoxhfvawycezesnutadrdsgeyrtytvswfndrkwtvokbbnzednmwuedybeclghhhaddllaotgynbnnhgmeltcylyjzeoaokgrntymktspemhkodpdwlfjlestkhfckvagowmhddsbtbsctcpcndmfygrhloyosqzrkuewlzsbsemhhkemooxrywfwkylbtbscyfehfjklblnmymwndsbbkbebwcnecgmhnioktqdrprssfutvlylytaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaeaebecydsemsadihpwf".to_string(),
            "ur:envelope/17-16/lpbybecfbggdcyemckteamhkaddagrwtrnrefzdimscejsbezobwenkgcphkaemycfwpasglwpsnaakpidwsplnyisdkeohsoehnuoprdiztuyemkkmofteomodwgaktvejkrprtaeiogykiyksbimglmefgkgfdgrdrmutkdslagrehltdtcwptmsndztadhlnsgrpkgtcartlycwztbnsprkwyoldnmtdaoylsmdtyspchgelprkswfgrtkknnoemddwtndsfmrhoxkpndrtdebzbnaeemcyjzvtotweahplbsaydicfgwdnasbwbdmobdpansbkstdaqztpndfwincfemhdoninrkzetohsaaeynbrpdlnlkplpuyjlaxcxrseykbkkpfnnptglhppfbkhkisbwcfdwvskprknnjeianecxlbmniefxaddknshewfcmvattrfqzwsynemylnbjskbdnimldctwsuodtzmfhcmditklnwndyesnsemceidbennqzoxvomocxurbgzsiyhertbnnyoejysaonykbwnbbzrsmdytwnndiscadwjokbdywnclfgpsaafnrppdsproktltbeyadlrpaaadwn".to_string(),
            "ur:envelope/18-16/lpbgbecfbggdcyemckteamhkaddapmwskgwtistnbdaabnlowzvwcfzmstveatetqdenlschfefybnbwtifsbeuylypegmvawsaopkfrpmlujydnchlydegopffyfwoxcamngwolzeuybtceuefdmskszocwinjtmocxjewfsaoswkurwlgsvoswnburpfbnnlwptepkjsutprsgvtlthtjojzntjojlspbyolykspdteyflfnrdgwnnldsklrcfiodkjymobtwdiekbtnnebdgmtlrlynwkndadpyswhhnsjnvlylmhdnlseopabbuepffsfsykeodannkejztyrnhtyasacnrlayltwstidpmhcafmtopdtkhnsglkfhdecxmwcftorslyfzdrrsaxdibnoxjtfdpdrojtadktemdwveammueyvwpamksfjeaystrelosgkbcawtlrbdfgjkvwketafeenregwotgalpdmutsahnldkklbswmsfzskmdvoptzefssamwpfahrssptopytdwpmkcacskkmnkbihsgoeetwymkaacwheaahtkoiewtdnsrolkghpwzgojpjldpotutielrflltuyvoiohs".to_string(),
            "ur:envelope/19-16/lpbwbecfbggdcyemckteamhkaddaosbkseemfzwpfpfwrfhkflnsotlrmsmnnnvalsdtehpkdnhslgtapfcyadmkchzeptprlbnsdesbkpfzknvyrlcabglyaaaalgidzthsweveiosnfnlpztksidhdethpnsfpfgcpiytkdiaeletpistknsclmdaxynhtgeeeheftvwreiemulywdvsjtosprrdbzfrolytjsbztowfhejtdsaysoeciaetwmcnahwtjzfytpneuobygsjeltnshyssptmhndjppybnsgeejsesdikpdssgkiwsfnpmcmndeylkgsptfdfxsputfpvwgyndrskkoemuoycsfncsfgoytpsotansfljojkihjtieihjpfwjzihfpieiejpihjkjktpsolnadaoaxaaahamoyaxtpsotansghtansptlfaohkasjyvwhpfpislufrsnjocfksdplkcezohpesltwsdkbnpamyluwfwzvsnnseeslnlerfmngmflryksollrvtcflrhkcywkaskbbbuegownahrkmsfrnepkbwweiagydiemvotdtsprhyhnoxlrfnzogmdatldadptnso".to_string(),
        )
    }

    #[tokio::test]
    async fn test_decode_qr() -> Result<()> {
        let mut decoder = get_decoder().await;
        let ur_codes = get_test_array();

        for ur in ur_codes {
            let result = decode_qr(ur, &mut decoder).await?;

            if result.progress == 1.0 {
                assert!(result.payload.is_some());
                let discovery = pair_device(result.payload.unwrap()).await;
                println!("");
            } else {
                assert!(result.payload.is_none());
            }
        }

        Ok(())
    }
}
