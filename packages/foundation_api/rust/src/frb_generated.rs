// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use crate::api::ql::*;
use bc_ur::*;
use bc_xid::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};
use foundation_api::api::quantum_link::*;

// Section: boilerplate

use btp::Dechunker;

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.9.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1642647050;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__ql__decode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            let api_decoder = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>,
            >>::sse_decode(&mut deserializer);
            let api_quantum_link_identity = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_decoder_guard = None;
                        let mut api_quantum_link_identity_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_decoder,
                                        0,
                                        true,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_quantum_link_identity,
                                        1,
                                        false,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_decoder_guard =
                                        Some(api_decoder.lockable_decode_async_ref_mut().await)
                                }
                                1 => {
                                    api_quantum_link_identity_guard = Some(
                                        api_quantum_link_identity.lockable_decode_async_ref().await,
                                    )
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_decoder_guard = api_decoder_guard.unwrap();
                        let api_quantum_link_identity_guard =
                            api_quantum_link_identity_guard.unwrap();
                        let output_ok = crate::api::ql::decode(
                            api_data,
                            &mut *api_decoder_guard,
                            &*api_quantum_link_identity_guard,
                        )
                        .await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__qr__decode_ble_message_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decode_ble_message",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_data = <Vec<u8>>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::qr::decode_ble_message(api_data).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__qr__decode_qr_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "decode_qr",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_qr = <String>::sse_decode(&mut deserializer);
            let api_decoder = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, flutter_rust_bridge::for_generated::anyhow::Error>(
                    (move || async move {
                        let mut api_decoder_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_decoder,
                                    0,
                                    true,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_decoder_guard =
                                        Some(api_decoder.lockable_decode_async_ref_mut().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let mut api_decoder_guard = api_decoder_guard.unwrap();
                        let output_ok =
                            crate::api::qr::decode_qr(api_qr, &mut *api_decoder_guard).await?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__ql__encode_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "encode",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_message =
                <foundation_api::api::message::EnvoyMessage>::sse_decode(&mut deserializer);
            let api_sender = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>,
            >>::sse_decode(&mut deserializer);
            let api_recipient = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_sender_guard = None;
                        let mut api_recipient_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_sender,
                                        0,
                                        false,
                                    ),
                                    flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                        &api_recipient,
                                        1,
                                        false,
                                    ),
                                ],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_sender_guard =
                                        Some(api_sender.lockable_decode_async_ref().await)
                                }
                                1 => {
                                    api_recipient_guard =
                                        Some(api_recipient.lockable_decode_async_ref().await)
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_sender_guard = api_sender_guard.unwrap();
                        let api_recipient_guard = api_recipient_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::ql::encode(
                                api_message,
                                &*api_sender_guard,
                                &*api_recipient_guard,
                            )
                            .await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__ql__generate_ql_identity_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "generate_ql_identity",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok =
                            Result::<_, ()>::Ok(crate::api::ql::generate_ql_identity().await)?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__ql__get_decoder_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_decoder",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok = Result::<_, ()>::Ok(crate::api::ql::get_decoder().await)?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__qr__get_qr_decoder_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_qr_decoder",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let output_ok =
                            Result::<_, ()>::Ok(crate::api::qr::get_qr_decoder().await)?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}
fn wire__crate__api__qr__greet_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "greet",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_name = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(crate::api::qr::greet(api_name))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__qr__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::qr::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}
fn wire__crate__api__ql__serialize_xid_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_async::<flutter_rust_bridge::for_generated::SseCodec, _, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "serialize_xid",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_quantum_link_identity = <RustOpaqueMoi<
                flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>,
            >>::sse_decode(&mut deserializer);
            deserializer.end();
            move |context| async move {
                transform_result_sse::<_, ()>(
                    (move || async move {
                        let mut api_quantum_link_identity_guard = None;
                        let decode_indices_ =
                            flutter_rust_bridge::for_generated::lockable_compute_decode_order(
                                vec![flutter_rust_bridge::for_generated::LockableOrderInfo::new(
                                    &api_quantum_link_identity,
                                    0,
                                    false,
                                )],
                            );
                        for i in decode_indices_ {
                            match i {
                                0 => {
                                    api_quantum_link_identity_guard = Some(
                                        api_quantum_link_identity.lockable_decode_async_ref().await,
                                    )
                                }
                                _ => unreachable!(),
                            }
                        }
                        let api_quantum_link_identity_guard =
                            api_quantum_link_identity_guard.unwrap();
                        let output_ok = Result::<_, ()>::Ok(
                            crate::api::ql::serialize_xid(&*api_quantum_link_identity_guard).await,
                        )?;
                        Ok(output_ok)
                    })()
                    .await,
                )
            }
        },
    )
}

// Section: static_checks

#[allow(clippy::unnecessary_literal_unwrap)]
const _: fn() = || {
    {
        let DeviceStatus = None::<foundation_api::api::status::DeviceStatus>.unwrap();
        let _: foundation_api::api::status::DeviceState = DeviceStatus.state;
        let _: u8 = DeviceStatus.battery_level;
        let _: i8 = DeviceStatus.ble_signal;
        let _: String = DeviceStatus.version;
    }
    {
        let EnvoyMessage = None::<foundation_api::api::message::EnvoyMessage>.unwrap();
        let _: foundation_api::api::message::QuantumLinkMessage = EnvoyMessage.message;
        let _: u32 = EnvoyMessage.timestamp;
    }
    {
        let EnvoyStatus = None::<foundation_api::api::status::EnvoyStatus>.unwrap();
        let _: foundation_api::api::status::EnvoyState = EnvoyStatus.state;
        let _: String = EnvoyStatus.version;
    }
    {
        let ExchangeRate = None::<foundation_api::api::fx::ExchangeRate>.unwrap();
        let _: String = ExchangeRate.currency_code;
        let _: f32 = ExchangeRate.rate;
    }
    {
        let FirmwareUpdate = None::<foundation_api::api::firmware::FirmwareUpdate>.unwrap();
        let _: String = FirmwareUpdate.version;
        let _: u32 = FirmwareUpdate.timestamp;
        let _: String = FirmwareUpdate.changelog;
    }
    {
        let PairingRequest = None::<foundation_api::api::pairing::PairingRequest>.unwrap();
        let _: Vec<u8> = PairingRequest.xid_document;
    }
    {
        let PairingResponse = None::<foundation_api::api::pairing::PairingResponse>.unwrap();
        let _: foundation_api::api::passport::PassportModel = PairingResponse.passport_model;
        let _: foundation_api::api::passport::PassportFirmwareVersion =
            PairingResponse.passport_firmware_version;
        let _: foundation_api::api::passport::PassportSerial = PairingResponse.passport_serial;
        let _: String = PairingResponse.descriptor;
    }
    {
        let PassportFirmwareVersion_ =
            None::<foundation_api::api::passport::PassportFirmwareVersion>.unwrap();
        let _: String = PassportFirmwareVersion_.0;
    }
    {
        let PassportMessage = None::<foundation_api::api::message::PassportMessage>.unwrap();
        let _: foundation_api::api::message::QuantumLinkMessage = PassportMessage.message;
        let _: foundation_api::api::status::DeviceStatus = PassportMessage.status;
    }
    {
        let PassportSerial_ = None::<foundation_api::api::passport::PassportSerial>.unwrap();
        let _: String = PassportSerial_.0;
    }
    match None::<foundation_api::api::message::QuantumLinkMessage>.unwrap() {
        foundation_api::api::message::QuantumLinkMessage::ExchangeRate(field0) => {
            let _: foundation_api::api::fx::ExchangeRate = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::FirmwareUpdate(field0) => {
            let _: foundation_api::api::firmware::FirmwareUpdate = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::DeviceStatus(field0) => {
            let _: foundation_api::api::status::DeviceStatus = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::EnvoyStatus(field0) => {
            let _: foundation_api::api::status::EnvoyStatus = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::PairingResponse(field0) => {
            let _: foundation_api::api::pairing::PairingResponse = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::PairingRequest(field0) => {
            let _: foundation_api::api::pairing::PairingRequest = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::OnboardingState(field0) => {
            let _: foundation_api::api::onboarding::OnboardingState = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::SignPsbt(field0) => {
            let _: foundation_api::api::bitcoin::SignPsbt = field0;
        }
        foundation_api::api::message::QuantumLinkMessage::SyncUpdate(field0) => {
            let _: foundation_api::api::bitcoin::SyncUpdate = field0;
        }
    }
    {
        let SignPsbt = None::<foundation_api::api::bitcoin::SignPsbt>.unwrap();
        let _: String = SignPsbt.descriptor;
        let _: String = SignPsbt.psbt;
    }
    {
        let SyncUpdate = None::<foundation_api::api::bitcoin::SyncUpdate>.unwrap();
        let _: String = SyncUpdate.descriptor;
        let _: Vec<u8> = SyncUpdate.update;
    }
};

// Section: related_funcs

flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>
);
flutter_rust_bridge::frb_generated_moi_arc_impl_value!(
    flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>
);

// Section: dart2rust

impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::anyhow::anyhow!("{}", inner);
    }
}

impl SseDecode for Dechunker {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for MultipartDecoder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for QuantumLinkIdentity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode for XIDDocument {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <RustOpaqueMoi<
            flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>,
        >>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::rust_auto_opaque_decode_owned(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <usize>::sse_decode(deserializer);
        return decode_rust_opaque_moi(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::ql::DecoderStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_progress = <f64>::sse_decode(deserializer);
        let mut var_payload =
            <Option<foundation_api::api::message::PassportMessage>>::sse_decode(deserializer);
        return crate::api::ql::DecoderStatus {
            progress: var_progress,
            payload: var_payload,
        };
    }
}

impl SseDecode for foundation_api::api::status::DeviceState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => foundation_api::api::status::DeviceState::Normal,
            1 => foundation_api::api::status::DeviceState::UpdatingFirmware,
            2 => foundation_api::api::status::DeviceState::Rebooting,
            _ => unreachable!("Invalid variant for DeviceState: {}", inner),
        };
    }
}

impl SseDecode for foundation_api::api::status::DeviceStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_state = <foundation_api::api::status::DeviceState>::sse_decode(deserializer);
        let mut var_batteryLevel = <u8>::sse_decode(deserializer);
        let mut var_bleSignal = <i8>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        return foundation_api::api::status::DeviceStatus {
            state: var_state,
            battery_level: var_batteryLevel,
            ble_signal: var_bleSignal,
            version: var_version,
        };
    }
}

impl SseDecode for foundation_api::api::message::EnvoyMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message =
            <foundation_api::api::message::QuantumLinkMessage>::sse_decode(deserializer);
        let mut var_timestamp = <u32>::sse_decode(deserializer);
        return foundation_api::api::message::EnvoyMessage {
            message: var_message,
            timestamp: var_timestamp,
        };
    }
}

impl SseDecode for foundation_api::api::status::EnvoyState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => foundation_api::api::status::EnvoyState::Normal,
            1 => foundation_api::api::status::EnvoyState::DownloadingFirmware,
            _ => unreachable!("Invalid variant for EnvoyState: {}", inner),
        };
    }
}

impl SseDecode for foundation_api::api::status::EnvoyStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_state = <foundation_api::api::status::EnvoyState>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        return foundation_api::api::status::EnvoyStatus {
            state: var_state,
            version: var_version,
        };
    }
}

impl SseDecode for foundation_api::api::fx::ExchangeRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_currencyCode = <String>::sse_decode(deserializer);
        let mut var_rate = <f32>::sse_decode(deserializer);
        return foundation_api::api::fx::ExchangeRate {
            currency_code: var_currencyCode,
            rate: var_rate,
        };
    }
}

impl SseDecode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_f64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for foundation_api::api::firmware::FirmwareUpdate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_timestamp = <u32>::sse_decode(deserializer);
        let mut var_changelog = <String>::sse_decode(deserializer);
        return foundation_api::api::firmware::FirmwareUpdate {
            version: var_version,
            timestamp: var_timestamp,
            changelog: var_changelog,
        };
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i8().unwrap()
    }
}

impl SseDecode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<Vec<u8>>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for foundation_api::api::onboarding::OnboardingState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => foundation_api::api::onboarding::OnboardingState::FirmwareUpdateScreen,
            1 => foundation_api::api::onboarding::OnboardingState::DownloadingUpdate,
            2 => foundation_api::api::onboarding::OnboardingState::ReceivingUpdate,
            3 => foundation_api::api::onboarding::OnboardingState::VeryfyingSignatures,
            4 => foundation_api::api::onboarding::OnboardingState::InstallingUpdate,
            5 => foundation_api::api::onboarding::OnboardingState::Rebooting,
            6 => foundation_api::api::onboarding::OnboardingState::FirmwareUpdated,
            7 => foundation_api::api::onboarding::OnboardingState::SecuringDevice,
            8 => foundation_api::api::onboarding::OnboardingState::DeviceSecured,
            9 => foundation_api::api::onboarding::OnboardingState::WalletCreationScreen,
            10 => foundation_api::api::onboarding::OnboardingState::CreatingWallet,
            11 => foundation_api::api::onboarding::OnboardingState::WalletCreated,
            12 => foundation_api::api::onboarding::OnboardingState::MagicBackupScreen,
            13 => foundation_api::api::onboarding::OnboardingState::CreatingMagicBackup,
            14 => foundation_api::api::onboarding::OnboardingState::MagicBackupCreated,
            15 => foundation_api::api::onboarding::OnboardingState::CreatingManualBackup,
            16 => foundation_api::api::onboarding::OnboardingState::CreatingKeycardBackup,
            17 => foundation_api::api::onboarding::OnboardingState::WritingDownSeedWords,
            18 => foundation_api::api::onboarding::OnboardingState::ConnectingWallet,
            19 => foundation_api::api::onboarding::OnboardingState::WalletConected,
            20 => foundation_api::api::onboarding::OnboardingState::Completed,
            21 => foundation_api::api::onboarding::OnboardingState::SecurityChecked,
            22 => foundation_api::api::onboarding::OnboardingState::UpdateAvailable,
            23 => foundation_api::api::onboarding::OnboardingState::UpdateNotAvailable,
            _ => unreachable!("Invalid variant for OnboardingState: {}", inner),
        };
    }
}

impl SseDecode for Option<XIDDocument> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<XIDDocument>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<foundation_api::api::message::PassportMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<foundation_api::api::message::PassportMessage>::sse_decode(
                deserializer,
            ));
        } else {
            return None;
        }
    }
}

impl SseDecode for foundation_api::api::pairing::PairingRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_xidDocument = <Vec<u8>>::sse_decode(deserializer);
        return foundation_api::api::pairing::PairingRequest {
            xid_document: var_xidDocument,
        };
    }
}

impl SseDecode for foundation_api::api::pairing::PairingResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_passportModel =
            <foundation_api::api::passport::PassportModel>::sse_decode(deserializer);
        let mut var_passportFirmwareVersion =
            <foundation_api::api::passport::PassportFirmwareVersion>::sse_decode(deserializer);
        let mut var_passportSerial =
            <foundation_api::api::passport::PassportSerial>::sse_decode(deserializer);
        let mut var_descriptor = <String>::sse_decode(deserializer);
        return foundation_api::api::pairing::PairingResponse {
            passport_model: var_passportModel,
            passport_firmware_version: var_passportFirmwareVersion,
            passport_serial: var_passportSerial,
            descriptor: var_descriptor,
        };
    }
}

impl SseDecode for foundation_api::api::passport::PassportFirmwareVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        return foundation_api::api::passport::PassportFirmwareVersion(var_field0);
    }
}

impl SseDecode for foundation_api::api::message::PassportMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_message =
            <foundation_api::api::message::QuantumLinkMessage>::sse_decode(deserializer);
        let mut var_status = <foundation_api::api::status::DeviceStatus>::sse_decode(deserializer);
        return foundation_api::api::message::PassportMessage {
            message: var_message,
            status: var_status,
        };
    }
}

impl SseDecode for foundation_api::api::passport::PassportModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => foundation_api::api::passport::PassportModel::Gen1,
            1 => foundation_api::api::passport::PassportModel::Gen2,
            2 => foundation_api::api::passport::PassportModel::Prime,
            _ => unreachable!("Invalid variant for PassportModel: {}", inner),
        };
    }
}

impl SseDecode for foundation_api::api::passport::PassportSerial {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_field0 = <String>::sse_decode(deserializer);
        return foundation_api::api::passport::PassportSerial(var_field0);
    }
}

impl SseDecode for crate::api::qr::QrDecoderStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_progress = <f64>::sse_decode(deserializer);
        let mut var_payload = <Option<XIDDocument>>::sse_decode(deserializer);
        return crate::api::qr::QrDecoderStatus {
            progress: var_progress,
            payload: var_payload,
        };
    }
}

impl SseDecode for foundation_api::api::message::QuantumLinkMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <foundation_api::api::fx::ExchangeRate>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::ExchangeRate(var_field0);
            }
            1 => {
                let mut var_field0 =
                    <foundation_api::api::firmware::FirmwareUpdate>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::FirmwareUpdate(
                    var_field0,
                );
            }
            2 => {
                let mut var_field0 =
                    <foundation_api::api::status::DeviceStatus>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::DeviceStatus(var_field0);
            }
            3 => {
                let mut var_field0 =
                    <foundation_api::api::status::EnvoyStatus>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::EnvoyStatus(var_field0);
            }
            4 => {
                let mut var_field0 =
                    <foundation_api::api::pairing::PairingResponse>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::PairingResponse(
                    var_field0,
                );
            }
            5 => {
                let mut var_field0 =
                    <foundation_api::api::pairing::PairingRequest>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::PairingRequest(
                    var_field0,
                );
            }
            6 => {
                let mut var_field0 =
                    <foundation_api::api::onboarding::OnboardingState>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::OnboardingState(
                    var_field0,
                );
            }
            7 => {
                let mut var_field0 =
                    <foundation_api::api::bitcoin::SignPsbt>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::SignPsbt(var_field0);
            }
            8 => {
                let mut var_field0 =
                    <foundation_api::api::bitcoin::SyncUpdate>::sse_decode(deserializer);
                return foundation_api::api::message::QuantumLinkMessage::SyncUpdate(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for foundation_api::api::bitcoin::SignPsbt {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_descriptor = <String>::sse_decode(deserializer);
        let mut var_psbt = <String>::sse_decode(deserializer);
        return foundation_api::api::bitcoin::SignPsbt {
            descriptor: var_descriptor,
            psbt: var_psbt,
        };
    }
}

impl SseDecode for foundation_api::api::bitcoin::SyncUpdate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_descriptor = <String>::sse_decode(deserializer);
        let mut var_update = <Vec<u8>>::sse_decode(deserializer);
        return foundation_api::api::bitcoin::SyncUpdate {
            descriptor: var_descriptor,
            update: var_update,
        };
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__ql__decode_impl(port, ptr, rust_vec_len, data_len),
        2 => wire__crate__api__qr__decode_ble_message_impl(port, ptr, rust_vec_len, data_len),
        3 => wire__crate__api__qr__decode_qr_impl(port, ptr, rust_vec_len, data_len),
        4 => wire__crate__api__ql__encode_impl(port, ptr, rust_vec_len, data_len),
        5 => wire__crate__api__ql__generate_ql_identity_impl(port, ptr, rust_vec_len, data_len),
        6 => wire__crate__api__ql__get_decoder_impl(port, ptr, rust_vec_len, data_len),
        7 => wire__crate__api__qr__get_qr_decoder_impl(port, ptr, rust_vec_len, data_len),
        9 => wire__crate__api__qr__init_app_impl(port, ptr, rust_vec_len, data_len),
        10 => wire__crate__api__ql__serialize_xid_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        8 => wire__crate__api__qr__greet_impl(ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<Dechunker> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<Dechunker> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<Dechunker>> for Dechunker {
    fn into_into_dart(self) -> FrbWrapper<Dechunker> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<MultipartDecoder> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<MultipartDecoder> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<MultipartDecoder>> for MultipartDecoder {
    fn into_into_dart(self) -> FrbWrapper<MultipartDecoder> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<QuantumLinkIdentity> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<QuantumLinkIdentity>
{
}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<QuantumLinkIdentity>> for QuantumLinkIdentity {
    fn into_into_dart(self) -> FrbWrapper<QuantumLinkIdentity> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<XIDDocument> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self.0)
            .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for FrbWrapper<XIDDocument> {}

impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<XIDDocument>> for XIDDocument {
    fn into_into_dart(self) -> FrbWrapper<XIDDocument> {
        self.into()
    }
}

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::ql::DecoderStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.progress.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::ql::DecoderStatus {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::ql::DecoderStatus>
    for crate::api::ql::DecoderStatus
{
    fn into_into_dart(self) -> crate::api::ql::DecoderStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::status::DeviceState> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            foundation_api::api::status::DeviceState::Normal => 0.into_dart(),
            foundation_api::api::status::DeviceState::UpdatingFirmware => 1.into_dart(),
            foundation_api::api::status::DeviceState::Rebooting => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::status::DeviceState>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::status::DeviceState>>
    for foundation_api::api::status::DeviceState
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::status::DeviceState> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::status::DeviceStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.state.into_into_dart().into_dart(),
            self.0.battery_level.into_into_dart().into_dart(),
            self.0.ble_signal.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::status::DeviceStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::status::DeviceStatus>>
    for foundation_api::api::status::DeviceStatus
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::status::DeviceStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::message::EnvoyMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.message.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::message::EnvoyMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::message::EnvoyMessage>>
    for foundation_api::api::message::EnvoyMessage
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::message::EnvoyMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::status::EnvoyState> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            foundation_api::api::status::EnvoyState::Normal => 0.into_dart(),
            foundation_api::api::status::EnvoyState::DownloadingFirmware => 1.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::status::EnvoyState>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::status::EnvoyState>>
    for foundation_api::api::status::EnvoyState
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::status::EnvoyState> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::status::EnvoyStatus> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.state.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::status::EnvoyStatus>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::status::EnvoyStatus>>
    for foundation_api::api::status::EnvoyStatus
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::status::EnvoyStatus> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::fx::ExchangeRate> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.currency_code.into_into_dart().into_dart(),
            self.0.rate.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::fx::ExchangeRate>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::fx::ExchangeRate>>
    for foundation_api::api::fx::ExchangeRate
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::fx::ExchangeRate> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::firmware::FirmwareUpdate> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.version.into_into_dart().into_dart(),
            self.0.timestamp.into_into_dart().into_dart(),
            self.0.changelog.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::firmware::FirmwareUpdate>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::firmware::FirmwareUpdate>>
    for foundation_api::api::firmware::FirmwareUpdate
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::firmware::FirmwareUpdate> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<foundation_api::api::onboarding::OnboardingState>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            foundation_api::api::onboarding::OnboardingState::FirmwareUpdateScreen => 0.into_dart(),
            foundation_api::api::onboarding::OnboardingState::DownloadingUpdate => 1.into_dart(),
            foundation_api::api::onboarding::OnboardingState::ReceivingUpdate => 2.into_dart(),
            foundation_api::api::onboarding::OnboardingState::VeryfyingSignatures => 3.into_dart(),
            foundation_api::api::onboarding::OnboardingState::InstallingUpdate => 4.into_dart(),
            foundation_api::api::onboarding::OnboardingState::Rebooting => 5.into_dart(),
            foundation_api::api::onboarding::OnboardingState::FirmwareUpdated => 6.into_dart(),
            foundation_api::api::onboarding::OnboardingState::SecuringDevice => 7.into_dart(),
            foundation_api::api::onboarding::OnboardingState::DeviceSecured => 8.into_dart(),
            foundation_api::api::onboarding::OnboardingState::WalletCreationScreen => 9.into_dart(),
            foundation_api::api::onboarding::OnboardingState::CreatingWallet => 10.into_dart(),
            foundation_api::api::onboarding::OnboardingState::WalletCreated => 11.into_dart(),
            foundation_api::api::onboarding::OnboardingState::MagicBackupScreen => 12.into_dart(),
            foundation_api::api::onboarding::OnboardingState::CreatingMagicBackup => 13.into_dart(),
            foundation_api::api::onboarding::OnboardingState::MagicBackupCreated => 14.into_dart(),
            foundation_api::api::onboarding::OnboardingState::CreatingManualBackup => {
                15.into_dart()
            }
            foundation_api::api::onboarding::OnboardingState::CreatingKeycardBackup => {
                16.into_dart()
            }
            foundation_api::api::onboarding::OnboardingState::WritingDownSeedWords => {
                17.into_dart()
            }
            foundation_api::api::onboarding::OnboardingState::ConnectingWallet => 18.into_dart(),
            foundation_api::api::onboarding::OnboardingState::WalletConected => 19.into_dart(),
            foundation_api::api::onboarding::OnboardingState::Completed => 20.into_dart(),
            foundation_api::api::onboarding::OnboardingState::SecurityChecked => 21.into_dart(),
            foundation_api::api::onboarding::OnboardingState::UpdateAvailable => 22.into_dart(),
            foundation_api::api::onboarding::OnboardingState::UpdateNotAvailable => 23.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::onboarding::OnboardingState>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::onboarding::OnboardingState>>
    for foundation_api::api::onboarding::OnboardingState
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::onboarding::OnboardingState> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::pairing::PairingRequest> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0.xid_document.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::pairing::PairingRequest>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::pairing::PairingRequest>>
    for foundation_api::api::pairing::PairingRequest
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::pairing::PairingRequest> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::pairing::PairingResponse> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.passport_model.into_into_dart().into_dart(),
            self.0
                .passport_firmware_version
                .into_into_dart()
                .into_dart(),
            self.0.passport_serial.into_into_dart().into_dart(),
            self.0.descriptor.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::pairing::PairingResponse>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::pairing::PairingResponse>>
    for foundation_api::api::pairing::PairingResponse
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::pairing::PairingResponse> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<foundation_api::api::passport::PassportFirmwareVersion>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::passport::PassportFirmwareVersion>
{
}
impl
    flutter_rust_bridge::IntoIntoDart<
        FrbWrapper<foundation_api::api::passport::PassportFirmwareVersion>,
    > for foundation_api::api::passport::PassportFirmwareVersion
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::passport::PassportFirmwareVersion> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::message::PassportMessage> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.message.into_into_dart().into_dart(),
            self.0.status.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::message::PassportMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::message::PassportMessage>>
    for foundation_api::api::message::PassportMessage
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::message::PassportMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::passport::PassportModel> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            foundation_api::api::passport::PassportModel::Gen1 => 0.into_dart(),
            foundation_api::api::passport::PassportModel::Gen2 => 1.into_dart(),
            foundation_api::api::passport::PassportModel::Prime => 2.into_dart(),
            _ => unreachable!(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::passport::PassportModel>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::passport::PassportModel>>
    for foundation_api::api::passport::PassportModel
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::passport::PassportModel> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::passport::PassportSerial> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.0 .0.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::passport::PassportSerial>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::passport::PassportSerial>>
    for foundation_api::api::passport::PassportSerial
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::passport::PassportSerial> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::qr::QrDecoderStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.progress.into_into_dart().into_dart(),
            self.payload.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::qr::QrDecoderStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::qr::QrDecoderStatus>
    for crate::api::qr::QrDecoderStatus
{
    fn into_into_dart(self) -> crate::api::qr::QrDecoderStatus {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart
    for FrbWrapper<foundation_api::api::message::QuantumLinkMessage>
{
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self.0 {
            foundation_api::api::message::QuantumLinkMessage::ExchangeRate(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::FirmwareUpdate(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::DeviceStatus(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::EnvoyStatus(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::PairingResponse(field0) => {
                [4.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::PairingRequest(field0) => {
                [5.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::OnboardingState(field0) => {
                [6.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::SignPsbt(field0) => {
                [7.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            foundation_api::api::message::QuantumLinkMessage::SyncUpdate(field0) => {
                [8.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::message::QuantumLinkMessage>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::message::QuantumLinkMessage>>
    for foundation_api::api::message::QuantumLinkMessage
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::message::QuantumLinkMessage> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::bitcoin::SignPsbt> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.descriptor.into_into_dart().into_dart(),
            self.0.psbt.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::bitcoin::SignPsbt>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::bitcoin::SignPsbt>>
    for foundation_api::api::bitcoin::SignPsbt
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::bitcoin::SignPsbt> {
        self.into()
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for FrbWrapper<foundation_api::api::bitcoin::SyncUpdate> {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.0.descriptor.into_into_dart().into_dart(),
            self.0.update.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for FrbWrapper<foundation_api::api::bitcoin::SyncUpdate>
{
}
impl flutter_rust_bridge::IntoIntoDart<FrbWrapper<foundation_api::api::bitcoin::SyncUpdate>>
    for foundation_api::api::bitcoin::SyncUpdate
{
    fn into_into_dart(self) -> FrbWrapper<foundation_api::api::bitcoin::SyncUpdate> {
        self.into()
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode for Dechunker {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for MultipartDecoder {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for QuantumLinkIdentity {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode for XIDDocument {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>>::sse_encode(flutter_rust_bridge::for_generated::rust_auto_opaque_encode::<_, MoiArc<_>>(self), serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode
    for RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        let (ptr, size) = self.sse_encode_raw();
        <usize>::sse_encode(ptr, serializer);
        <i32>::sse_encode(size, serializer);
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::ql::DecoderStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.progress, serializer);
        <Option<foundation_api::api::message::PassportMessage>>::sse_encode(
            self.payload,
            serializer,
        );
    }
}

impl SseEncode for foundation_api::api::status::DeviceState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                foundation_api::api::status::DeviceState::Normal => 0,
                foundation_api::api::status::DeviceState::UpdatingFirmware => 1,
                foundation_api::api::status::DeviceState::Rebooting => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for foundation_api::api::status::DeviceStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <foundation_api::api::status::DeviceState>::sse_encode(self.state, serializer);
        <u8>::sse_encode(self.battery_level, serializer);
        <i8>::sse_encode(self.ble_signal, serializer);
        <String>::sse_encode(self.version, serializer);
    }
}

impl SseEncode for foundation_api::api::message::EnvoyMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <foundation_api::api::message::QuantumLinkMessage>::sse_encode(self.message, serializer);
        <u32>::sse_encode(self.timestamp, serializer);
    }
}

impl SseEncode for foundation_api::api::status::EnvoyState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                foundation_api::api::status::EnvoyState::Normal => 0,
                foundation_api::api::status::EnvoyState::DownloadingFirmware => 1,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for foundation_api::api::status::EnvoyStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <foundation_api::api::status::EnvoyState>::sse_encode(self.state, serializer);
        <String>::sse_encode(self.version, serializer);
    }
}

impl SseEncode for foundation_api::api::fx::ExchangeRate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.currency_code, serializer);
        <f32>::sse_encode(self.rate, serializer);
    }
}

impl SseEncode for f32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for f64 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_f64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for foundation_api::api::firmware::FirmwareUpdate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.version, serializer);
        <u32>::sse_encode(self.timestamp, serializer);
        <String>::sse_encode(self.changelog, serializer);
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i8(self).unwrap();
    }
}

impl SseEncode for Vec<Vec<u8>> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <Vec<u8>>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for foundation_api::api::onboarding::OnboardingState {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                foundation_api::api::onboarding::OnboardingState::FirmwareUpdateScreen => 0,
                foundation_api::api::onboarding::OnboardingState::DownloadingUpdate => 1,
                foundation_api::api::onboarding::OnboardingState::ReceivingUpdate => 2,
                foundation_api::api::onboarding::OnboardingState::VeryfyingSignatures => 3,
                foundation_api::api::onboarding::OnboardingState::InstallingUpdate => 4,
                foundation_api::api::onboarding::OnboardingState::Rebooting => 5,
                foundation_api::api::onboarding::OnboardingState::FirmwareUpdated => 6,
                foundation_api::api::onboarding::OnboardingState::SecuringDevice => 7,
                foundation_api::api::onboarding::OnboardingState::DeviceSecured => 8,
                foundation_api::api::onboarding::OnboardingState::WalletCreationScreen => 9,
                foundation_api::api::onboarding::OnboardingState::CreatingWallet => 10,
                foundation_api::api::onboarding::OnboardingState::WalletCreated => 11,
                foundation_api::api::onboarding::OnboardingState::MagicBackupScreen => 12,
                foundation_api::api::onboarding::OnboardingState::CreatingMagicBackup => 13,
                foundation_api::api::onboarding::OnboardingState::MagicBackupCreated => 14,
                foundation_api::api::onboarding::OnboardingState::CreatingManualBackup => 15,
                foundation_api::api::onboarding::OnboardingState::CreatingKeycardBackup => 16,
                foundation_api::api::onboarding::OnboardingState::WritingDownSeedWords => 17,
                foundation_api::api::onboarding::OnboardingState::ConnectingWallet => 18,
                foundation_api::api::onboarding::OnboardingState::WalletConected => 19,
                foundation_api::api::onboarding::OnboardingState::Completed => 20,
                foundation_api::api::onboarding::OnboardingState::SecurityChecked => 21,
                foundation_api::api::onboarding::OnboardingState::UpdateAvailable => 22,
                foundation_api::api::onboarding::OnboardingState::UpdateNotAvailable => 23,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for Option<XIDDocument> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <XIDDocument>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<foundation_api::api::message::PassportMessage> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <foundation_api::api::message::PassportMessage>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for foundation_api::api::pairing::PairingRequest {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.xid_document, serializer);
    }
}

impl SseEncode for foundation_api::api::pairing::PairingResponse {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <foundation_api::api::passport::PassportModel>::sse_encode(self.passport_model, serializer);
        <foundation_api::api::passport::PassportFirmwareVersion>::sse_encode(
            self.passport_firmware_version,
            serializer,
        );
        <foundation_api::api::passport::PassportSerial>::sse_encode(
            self.passport_serial,
            serializer,
        );
        <String>::sse_encode(self.descriptor, serializer);
    }
}

impl SseEncode for foundation_api::api::passport::PassportFirmwareVersion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for foundation_api::api::message::PassportMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <foundation_api::api::message::QuantumLinkMessage>::sse_encode(self.message, serializer);
        <foundation_api::api::status::DeviceStatus>::sse_encode(self.status, serializer);
    }
}

impl SseEncode for foundation_api::api::passport::PassportModel {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(
            match self {
                foundation_api::api::passport::PassportModel::Gen1 => 0,
                foundation_api::api::passport::PassportModel::Gen2 => 1,
                foundation_api::api::passport::PassportModel::Prime => 2,
                _ => {
                    unimplemented!("");
                }
            },
            serializer,
        );
    }
}

impl SseEncode for foundation_api::api::passport::PassportSerial {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.0, serializer);
    }
}

impl SseEncode for crate::api::qr::QrDecoderStatus {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <f64>::sse_encode(self.progress, serializer);
        <Option<XIDDocument>>::sse_encode(self.payload, serializer);
    }
}

impl SseEncode for foundation_api::api::message::QuantumLinkMessage {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            foundation_api::api::message::QuantumLinkMessage::ExchangeRate(field0) => {
                <i32>::sse_encode(0, serializer);
                <foundation_api::api::fx::ExchangeRate>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::FirmwareUpdate(field0) => {
                <i32>::sse_encode(1, serializer);
                <foundation_api::api::firmware::FirmwareUpdate>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::DeviceStatus(field0) => {
                <i32>::sse_encode(2, serializer);
                <foundation_api::api::status::DeviceStatus>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::EnvoyStatus(field0) => {
                <i32>::sse_encode(3, serializer);
                <foundation_api::api::status::EnvoyStatus>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::PairingResponse(field0) => {
                <i32>::sse_encode(4, serializer);
                <foundation_api::api::pairing::PairingResponse>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::PairingRequest(field0) => {
                <i32>::sse_encode(5, serializer);
                <foundation_api::api::pairing::PairingRequest>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::OnboardingState(field0) => {
                <i32>::sse_encode(6, serializer);
                <foundation_api::api::onboarding::OnboardingState>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::SignPsbt(field0) => {
                <i32>::sse_encode(7, serializer);
                <foundation_api::api::bitcoin::SignPsbt>::sse_encode(field0, serializer);
            }
            foundation_api::api::message::QuantumLinkMessage::SyncUpdate(field0) => {
                <i32>::sse_encode(8, serializer);
                <foundation_api::api::bitcoin::SyncUpdate>::sse_encode(field0, serializer);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseEncode for foundation_api::api::bitcoin::SignPsbt {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.descriptor, serializer);
        <String>::sse_encode(self.psbt, serializer);
    }
}

impl SseEncode for foundation_api::api::bitcoin::SyncUpdate {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.descriptor, serializer);
        <Vec<u8>>::sse_encode(self.update, serializer);
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use crate::api::ql::*;
    use bc_ur::*;
    use bc_xid::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    use foundation_api::api::quantum_link::*;

    // Section: boilerplate

    use btp::Dechunker;

    flutter_rust_bridge::frb_generated_boilerplate_io!();

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultipartDecoder(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultipartDecoder(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>::decrement_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>::increment_strong_count(ptr as _);
    }

    #[unsafe(no_mangle)]
    pub extern "C" fn frbgen_foundation_api_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.9.0.

    // Section: imports

    use super::*;
    use crate::api::ql::*;
    use bc_ur::*;
    use bc_xid::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};
    use foundation_api::api::quantum_link::*;

    // Section: boilerplate

    use btp::Dechunker;

    flutter_rust_bridge::frb_generated_boilerplate_web!();

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerDechunker(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Dechunker>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultipartDecoder(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMultipartDecoder(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultipartDecoder>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerQuantumLinkIdentity(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QuantumLinkIdentity>>::decrement_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>::increment_strong_count(ptr as _);
    }

    #[wasm_bindgen]
    pub fn rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerXIDDocument(
        ptr: *const std::ffi::c_void,
    ) {
        MoiArc::<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<XIDDocument>>::decrement_strong_count(ptr as _);
    }
}
#[cfg(target_family = "wasm")]
pub use web::*;
