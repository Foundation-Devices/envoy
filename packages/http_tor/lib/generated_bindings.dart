// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> http_last_error_message() {
    return _http_last_error_message();
  }

  late final _http_last_error_messagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'http_last_error_message');
  late final _http_last_error_message = _http_last_error_messagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  void http_get_file_cancel(
    ffi.Pointer<ffi.Int> handle,
  ) {
    return _http_get_file_cancel(
      handle,
    );
  }

  late final _http_get_file_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Int>)>>(
          'http_get_file_cancel');
  late final _http_get_file_cancel = _http_get_file_cancelPtr
      .asFunction<void Function(ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Int> http_get_file(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<ffi.Char> url,
    int tor_port,
    int isolate_port,
  ) {
    return _http_get_file(
      path,
      url,
      tor_port,
      isolate_port,
    );
  }

  late final _http_get_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Int> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int32, ffi.Int64)>>('http_get_file');
  late final _http_get_file = _http_get_filePtr.asFunction<
      ffi.Pointer<ffi.Int> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int, int)>();

  HttpResponse http_request(
    int verb,
    ffi.Pointer<ffi.Char> url,
    int tor_port,
    ffi.Pointer<ffi.Char> body,
    int header_number,
    ffi.Pointer<ffi.Pointer<ffi.Char>> headers,
  ) {
    return _http_request(
      verb,
      url,
      tor_port,
      body,
      header_number,
      headers,
    );
  }

  late final _http_requestPtr = _lookup<
      ffi.NativeFunction<
          HttpResponse Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Uint8,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('http_request');
  late final _http_request = _http_requestPtr.asFunction<
      HttpResponse Function(int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void http_post(
    ffi.Pointer<ffi.Char> uri,
  ) {
    return _http_post(
      uri,
    );
  }

  late final _http_postPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'http_post');
  late final _http_post =
      _http_postPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> http_get_ip(
    int tor_port,
  ) {
    return _http_get_ip(
      tor_port,
    );
  }

  late final _http_get_ipPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int32)>>(
          'http_get_ip');
  late final _http_get_ip =
      _http_get_ipPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void http_hello() {
    return _http_hello();
  }

  late final _http_helloPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('http_hello');
  late final _http_hello = _http_helloPtr.asFunction<void Function()>();
}

abstract class Verb {
  static const int Get = 0;
  static const int Post = 1;
}

class HttpResponse extends ffi.Struct {
  @ffi.Int32()
  external int status_code;

  @ffi.Uint32()
  external int body_len;

  external ffi.Pointer<ffi.Uint8> body;
}

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const int INT8_WIDTH = 8;

const int UINT8_WIDTH = 8;

const int INT16_WIDTH = 16;

const int UINT16_WIDTH = 16;

const int INT32_WIDTH = 32;

const int UINT32_WIDTH = 32;

const int INT64_WIDTH = 64;

const int UINT64_WIDTH = 64;

const int INT_LEAST8_WIDTH = 8;

const int UINT_LEAST8_WIDTH = 8;

const int INT_LEAST16_WIDTH = 16;

const int UINT_LEAST16_WIDTH = 16;

const int INT_LEAST32_WIDTH = 32;

const int UINT_LEAST32_WIDTH = 32;

const int INT_LEAST64_WIDTH = 64;

const int UINT_LEAST64_WIDTH = 64;

const int INT_FAST8_WIDTH = 8;

const int UINT_FAST8_WIDTH = 8;

const int INT_FAST16_WIDTH = 64;

const int UINT_FAST16_WIDTH = 64;

const int INT_FAST32_WIDTH = 64;

const int UINT_FAST32_WIDTH = 64;

const int INT_FAST64_WIDTH = 64;

const int UINT_FAST64_WIDTH = 64;

const int INTPTR_WIDTH = 64;

const int UINTPTR_WIDTH = 64;

const int INTMAX_WIDTH = 64;

const int UINTMAX_WIDTH = 64;

const int PTRDIFF_WIDTH = 64;

const int SIG_ATOMIC_WIDTH = 32;

const int SIZE_WIDTH = 64;

const int WCHAR_WIDTH = 32;

const int WINT_WIDTH = 32;

const int NULL = 0;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WSTOPPED = 2;

const int WEXITED = 4;

const int WCONTINUED = 8;

const int WNOWAIT = 16777216;

const int RAND_MAX = 2147483647;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int FD_SETSIZE = 1024;

const int NFDBITS = 64;
