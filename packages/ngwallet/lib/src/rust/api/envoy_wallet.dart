// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../third_party/ngwallet/config.dart';
import '../third_party/ngwallet/transaction.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < NgAccount < Connection > > >>>
abstract class ArcMutexNgAccountConnection implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < Option < FullScanRequest < KeychainKind > > > >>>
abstract class ArcMutexOptionFullScanRequestKeychainKind
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < Option < FullScanResponse < KeychainKind > > > >>>
abstract class ArcMutexOptionFullScanResponseKeychainKind
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EnvoyAccount>>
abstract class EnvoyAccount implements RustOpaqueInterface {
  Future<bool> applyUpdate(
      {required ArcMutexOptionFullScanResponseKeychainKind scanRequest});

  ArcMutexNgAccountConnection get ngAccount;

  set ngAccount(ArcMutexNgAccountConnection ngAccount);

  BigInt balance();

  Future<void> broadcast(
      {required String psbt, required String electrumServer});

  NgAccountConfig config();

  bool isHot();

  static Future<EnvoyAccount> migrate(
          {required String name,
          required String id,
          String? deviceSerial,
          String? dateAdded,
          required AddressType addressType,
          required String color,
          required int index,
          required String internalDescriptor,
          required String externalDescriptor,
          required String dbPath,
          required String sledDbPath,
          required Network network}) =>
      RustLib.instance.api.crateApiEnvoyWalletEnvoyAccountMigrate(
          name: name,
          id: id,
          deviceSerial: deviceSerial,
          dateAdded: dateAdded,
          addressType: addressType,
          color: color,
          index: index,
          internalDescriptor: internalDescriptor,
          externalDescriptor: externalDescriptor,
          dbPath: dbPath,
          sledDbPath: sledDbPath,
          network: network);

  static Future<EnvoyAccount> newFromDescriptor(
          {required String name,
          String? deviceSerial,
          String? dateAdded,
          required AddressType addressType,
          required String color,
          required int index,
          required String internalDescriptor,
          required String externalDescriptor,
          required String dbPath,
          required Network network,
          required String id}) =>
      RustLib.instance.api.crateApiEnvoyWalletEnvoyAccountNewFromDescriptor(
          name: name,
          deviceSerial: deviceSerial,
          dateAdded: dateAdded,
          addressType: addressType,
          color: color,
          index: index,
          internalDescriptor: internalDescriptor,
          externalDescriptor: externalDescriptor,
          dbPath: dbPath,
          network: network,
          id: id);

  Future<String> nextAddress();

  static Future<EnvoyAccount> openWallet({required String dbPath}) =>
      RustLib.instance.api
          .crateApiEnvoyWalletEnvoyAccountOpenWallet(dbPath: dbPath);

  Future<ArcMutexOptionFullScanRequestKeychainKind> requestScan();

  static Future<ArcMutexOptionFullScanResponseKeychainKind> scan(
          {required ArcMutexOptionFullScanRequestKeychainKind scanRequest,
          required String electrumServer}) =>
      RustLib.instance.api.crateApiEnvoyWalletEnvoyAccountScan(
          scanRequest: scanRequest, electrumServer: electrumServer);

  Future<String> send({required String address, required BigInt amount});

  Future<bool> setDoNotSpend({required Output utxo, required bool doNotSpend});

  Future<bool> setNote({required String txId, required String note});

  Future<bool> setTag({required Output utxo, required String tag});

  Future<List<BitcoinTransaction>> transactions();

  Future<List<Output>> utxo();
}

enum Network {
  /// Mainnet Bitcoin.
  bitcoin,

  /// Bitcoin's testnet network. (In future versions this will be combined
  /// into a single variant containing the version)
  testnet,

  /// Bitcoin's testnet4 network. (In future versions this will be combined
  /// into a single variant containing the version)
  testnet4,

  /// Bitcoin's signet network.
  signet,

  /// Bitcoin's regtest network.
  regtest,
  ;
}
