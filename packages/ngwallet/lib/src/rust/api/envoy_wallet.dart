// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../third_party/ngwallet/transaction.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < NgAccount > >>>
abstract class ArcMutexNgAccount implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < Option < FullScanRequest < KeychainKind > > > >>>
abstract class ArcMutexOptionFullScanRequestKeychainKind
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Arc < Mutex < Option < FullScanResponse < KeychainKind > > > >>>
abstract class ArcMutexOptionFullScanResponseKeychainKind
    implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<EnvoyAccount>>
abstract class EnvoyAccount implements RustOpaqueInterface {
  Future<bool> applyUpdate(
      {required ArcMutexOptionFullScanResponseKeychainKind scanRequest});

  ArcMutexNgAccount get ngAccount;

  set ngAccount(ArcMutexNgAccount ngAccount);

  Future<BigInt> balance();

  static Future<EnvoyAccount> newFromDescriptor(
          {required String name,
          required String descriptor,
          String? deviceSerial,
          required String color,
          required int index,
          String? dbPath}) =>
      RustLib.instance.api.crateApiEnvoyWalletEnvoyAccountNewFromDescriptor(
          name: name,
          descriptor: descriptor,
          deviceSerial: deviceSerial,
          color: color,
          index: index,
          dbPath: dbPath);

  Future<String> nextAddress();

  Future<ArcMutexOptionFullScanRequestKeychainKind> requestScan();

  static Future<ArcMutexOptionFullScanResponseKeychainKind> scan(
          {required ArcMutexOptionFullScanRequestKeychainKind scanRequest}) =>
      RustLib.instance.api
          .crateApiEnvoyWalletEnvoyAccountScan(scanRequest: scanRequest);

  Future<void> setDoNotSpend({required Output utxo, required bool doNotSpend});

  Future<void> setNote({required String txId, required String note});

  Future<void> setTag({required Output utxo, required String tag});

  Future<List<BitcoinTransaction>> transactions();

  Future<List<Output>> utxo();
}
