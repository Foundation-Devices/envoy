// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../api/envoy_wallet.dart';
import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<MultiSigDetails>>
abstract class MultiSigDetails implements RustOpaqueInterface {}

enum AddressType {
  /// Pay to pubkey hash.
  p2Pkh,

  /// Pay to script hash.
  p2Sh,

  /// Pay to witness pubkey hash.
  p2Wpkh,

  /// Pay to witness script hash.
  p2Wsh,

  /// Pay to taproot.
  p2Tr,

  /// Bip 49 script.
  p2ShWpkh,

  /// Bip48/1 script.
  p2ShWsh,
  ;
}

class NgAccountBackup {
  final NgAccountConfig ngAccountConfig;
  final String xfp;
  final List<(AddressType, String)> publicDescriptors;
  final List<(AddressType, KeychainKind, int)> lastUsedIndex;
  final Map<String, String> notes;
  final Map<String, String> tags;
  final Map<String, bool> doNotSpend;

  const NgAccountBackup({
    required this.ngAccountConfig,
    required this.xfp,
    required this.publicDescriptors,
    required this.lastUsedIndex,
    required this.notes,
    required this.tags,
    required this.doNotSpend,
  });

  @override
  int get hashCode =>
      ngAccountConfig.hashCode ^
      xfp.hashCode ^
      publicDescriptors.hashCode ^
      lastUsedIndex.hashCode ^
      notes.hashCode ^
      tags.hashCode ^
      doNotSpend.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NgAccountBackup &&
          runtimeType == other.runtimeType &&
          ngAccountConfig == other.ngAccountConfig &&
          xfp == other.xfp &&
          publicDescriptors == other.publicDescriptors &&
          lastUsedIndex == other.lastUsedIndex &&
          notes == other.notes &&
          tags == other.tags &&
          doNotSpend == other.doNotSpend;
}

class NgAccountConfig {
  final String name;
  final String color;
  final bool seedHasPassphrase;
  final String? deviceSerial;
  final String? dateAdded;
  final AddressType preferredAddressType;
  final int index;
  final List<NgDescriptor> descriptors;
  final String? dateSynced;
  final String? accountPath;
  final Network network;
  final String id;
  final MultiSigDetails? multisig;

  const NgAccountConfig({
    required this.name,
    required this.color,
    required this.seedHasPassphrase,
    this.deviceSerial,
    this.dateAdded,
    required this.preferredAddressType,
    required this.index,
    required this.descriptors,
    this.dateSynced,
    this.accountPath,
    required this.network,
    required this.id,
    this.multisig,
  });

  @override
  int get hashCode =>
      name.hashCode ^
      color.hashCode ^
      seedHasPassphrase.hashCode ^
      deviceSerial.hashCode ^
      dateAdded.hashCode ^
      preferredAddressType.hashCode ^
      index.hashCode ^
      descriptors.hashCode ^
      dateSynced.hashCode ^
      accountPath.hashCode ^
      network.hashCode ^
      id.hashCode ^
      multisig.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NgAccountConfig &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          color == other.color &&
          seedHasPassphrase == other.seedHasPassphrase &&
          deviceSerial == other.deviceSerial &&
          dateAdded == other.dateAdded &&
          preferredAddressType == other.preferredAddressType &&
          index == other.index &&
          descriptors == other.descriptors &&
          dateSynced == other.dateSynced &&
          accountPath == other.accountPath &&
          network == other.network &&
          id == other.id &&
          multisig == other.multisig;
}

class NgDescriptor {
  final String internal;
  final String? external_;
  final AddressType addressType;

  const NgDescriptor({
    required this.internal,
    this.external_,
    required this.addressType,
  });

  @override
  int get hashCode =>
      internal.hashCode ^ external_.hashCode ^ addressType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NgDescriptor &&
          runtimeType == other.runtimeType &&
          internal == other.internal &&
          external_ == other.external_ &&
          addressType == other.addressType;
}
