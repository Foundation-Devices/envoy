// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../api/envoy_wallet.dart';
import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `cmp`, `eq`, `fmt`, `fmt`, `hash`, `partial_cmp`

enum AddressType {
  /// Pay to pubkey hash.
  p2Pkh,

  /// Pay to script hash.
  p2Sh,

  /// Pay to witness pubkey hash.
  p2Wpkh,

  /// Pay to witness script hash.
  p2Wsh,

  /// Pay to taproot.
  p2Tr,
  ;
}

class NgAccountConfig {
  final String name;
  final String color;
  final String? deviceSerial;
  final String? dateAdded;
  final AddressType addressType;
  final int index;
  final String internalDescriptor;
  final String? externalDescriptor;
  final String? dateSynced;
  final Network network;
  final String id;

  const NgAccountConfig({
    required this.name,
    required this.color,
    this.deviceSerial,
    this.dateAdded,
    required this.addressType,
    required this.index,
    required this.internalDescriptor,
    this.externalDescriptor,
    this.dateSynced,
    required this.network,
    required this.id,
  });

  static Future<NgAccountConfig> deserialize({required String data}) =>
      RustLib.instance.api.ngwalletConfigNgAccountConfigDeserialize(data: data);

  Future<bool> isHot() =>
      RustLib.instance.api.ngwalletConfigNgAccountConfigIsHot(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<NgAccountConfig> newInstance(
          {required String name,
          required String color,
          String? deviceSerial,
          String? dateAdded,
          required int index,
          required String internalDescriptor,
          String? externalDescriptor,
          required AddressType addressType,
          required Network network,
          required String id,
          String? dateSynced}) =>
      RustLib.instance.api.ngwalletConfigNgAccountConfigNew(
          name: name,
          color: color,
          deviceSerial: deviceSerial,
          dateAdded: dateAdded,
          index: index,
          internalDescriptor: internalDescriptor,
          externalDescriptor: externalDescriptor,
          addressType: addressType,
          network: network,
          id: id,
          dateSynced: dateSynced);

  Future<String> serialize() =>
      RustLib.instance.api.ngwalletConfigNgAccountConfigSerialize(
        that: this,
      );

  @override
  int get hashCode =>
      name.hashCode ^
      color.hashCode ^
      deviceSerial.hashCode ^
      dateAdded.hashCode ^
      addressType.hashCode ^
      index.hashCode ^
      internalDescriptor.hashCode ^
      externalDescriptor.hashCode ^
      dateSynced.hashCode ^
      network.hashCode ^
      id.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NgAccountConfig &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          color == other.color &&
          deviceSerial == other.deviceSerial &&
          dateAdded == other.dateAdded &&
          addressType == other.addressType &&
          index == other.index &&
          internalDescriptor == other.internalDescriptor &&
          externalDescriptor == other.externalDescriptor &&
          dateSynced == other.dateSynced &&
          network == other.network &&
          id == other.id;
}
