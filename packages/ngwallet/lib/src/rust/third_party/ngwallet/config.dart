// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../api/envoy_wallet.dart';
import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `cmp`, `eq`, `fmt`, `fmt`, `fmt`, `hash`, `partial_cmp`

enum AddressType {
  /// Pay to pubkey hash.
  p2Pkh,

  /// Pay to script hash.
  p2Sh,

  /// Pay to witness pubkey hash.
  p2Wpkh,

  /// Pay to witness script hash.
  p2Wsh,

  /// Pay to taproot.
  p2Tr,
  ;
}

class NgAccountConfig {
  final String name;
  final String color;
  final String? deviceSerial;
  final String? dateAdded;
  final AddressType preferredAddressType;
  final int index;
  final List<NgDescriptor> descriptors;
  final String? dateSynced;
  final String? walletPath;
  final Network network;
  final String id;

  const NgAccountConfig({
    required this.name,
    required this.color,
    this.deviceSerial,
    this.dateAdded,
    required this.preferredAddressType,
    required this.index,
    required this.descriptors,
    this.dateSynced,
    this.walletPath,
    required this.network,
    required this.id,
  });

  static Future<NgAccountConfig> deserialize({required String data}) =>
      RustLib.instance.api.ngwalletConfigNgAccountConfigDeserialize(data: data);

  Future<String> serialize() =>
      RustLib.instance.api.ngwalletConfigNgAccountConfigSerialize(
        that: this,
      );

  @override
  int get hashCode =>
      name.hashCode ^
      color.hashCode ^
      deviceSerial.hashCode ^
      dateAdded.hashCode ^
      preferredAddressType.hashCode ^
      index.hashCode ^
      descriptors.hashCode ^
      dateSynced.hashCode ^
      walletPath.hashCode ^
      network.hashCode ^
      id.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NgAccountConfig &&
          runtimeType == other.runtimeType &&
          name == other.name &&
          color == other.color &&
          deviceSerial == other.deviceSerial &&
          dateAdded == other.dateAdded &&
          preferredAddressType == other.preferredAddressType &&
          index == other.index &&
          descriptors == other.descriptors &&
          dateSynced == other.dateSynced &&
          walletPath == other.walletPath &&
          network == other.network &&
          id == other.id;
}

class NgDescriptor {
  final String internal;
  final String? external_;
  final AddressType addressType;

  const NgDescriptor({
    required this.internal,
    this.external_,
    required this.addressType,
  });

  @override
  int get hashCode =>
      internal.hashCode ^ external_.hashCode ^ addressType.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is NgDescriptor &&
          runtimeType == other.runtimeType &&
          internal == other.internal &&
          external_ == other.external_ &&
          addressType == other.addressType;
}
