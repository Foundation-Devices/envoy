// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'transaction.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<TransactionComposeError>>
abstract class TransactionComposeError implements RustOpaqueInterface {}

class DraftTransaction {
  final BitcoinTransaction transaction;
  final Uint8List psbt;
  final String? changeOutPutTag;
  final List<String> inputTags;
  final bool isFinalized;

  const DraftTransaction({
    required this.transaction,
    required this.psbt,
    this.changeOutPutTag,
    required this.inputTags,
    required this.isFinalized,
  });

  @override
  int get hashCode =>
      transaction.hashCode ^
      psbt.hashCode ^
      changeOutPutTag.hashCode ^
      inputTags.hashCode ^
      isFinalized.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DraftTransaction &&
          runtimeType == other.runtimeType &&
          transaction == other.transaction &&
          psbt == other.psbt &&
          changeOutPutTag == other.changeOutPutTag &&
          inputTags == other.inputTags &&
          isFinalized == other.isFinalized;
}

class TransactionFeeResult {
  final BigInt maxFeeRate;
  final BigInt minFeeRate;
  final DraftTransaction draftTransaction;

  const TransactionFeeResult({
    required this.maxFeeRate,
    required this.minFeeRate,
    required this.draftTransaction,
  });

  @override
  int get hashCode =>
      maxFeeRate.hashCode ^ minFeeRate.hashCode ^ draftTransaction.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionFeeResult &&
          runtimeType == other.runtimeType &&
          maxFeeRate == other.maxFeeRate &&
          minFeeRate == other.minFeeRate &&
          draftTransaction == other.draftTransaction;
}

class TransactionParams {
  final String address;
  final BigInt amount;
  final BigInt feeRate;
  final List<Output> selectedOutputs;
  final String? note;
  final String? tag;
  final bool doNotSpendChange;

  const TransactionParams({
    required this.address,
    required this.amount,
    required this.feeRate,
    required this.selectedOutputs,
    this.note,
    this.tag,
    required this.doNotSpendChange,
  });

  @override
  int get hashCode =>
      address.hashCode ^
      amount.hashCode ^
      feeRate.hashCode ^
      selectedOutputs.hashCode ^
      note.hashCode ^
      tag.hashCode ^
      doNotSpendChange.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TransactionParams &&
          runtimeType == other.runtimeType &&
          address == other.address &&
          amount == other.amount &&
          feeRate == other.feeRate &&
          selectedOutputs == other.selectedOutputs &&
          note == other.note &&
          tag == other.tag &&
          doNotSpendChange == other.doNotSpendChange;
}
