// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `decode`, `encode`

String greet({required String name}) =>
    RustLib.instance.api.crateApiShardGreet(name: name);

class ShardBackUp {
  final String deviceSerial;
  final String shardIdentifier;
  final BigInt timestamp;
  final Uint8List shard;

  const ShardBackUp({
    required this.deviceSerial,
    required this.shardIdentifier,
    required this.timestamp,
    required this.shard,
  });

  static Future<void> addNewShard(
          {required List<int> shard,
          required String shardIdentifier,
          required String deviceSerial,
          required String filePath}) =>
      RustLib.instance.api.crateApiShardShardBackUpAddNewShard(
          shard: shard,
          shardIdentifier: shardIdentifier,
          deviceSerial: deviceSerial,
          filePath: filePath);

  static Future<ShardBackUp> fromBytes({required List<int> data}) =>
      RustLib.instance.api.crateApiShardShardBackUpFromBytes(data: data);

  static Future<List<ShardBackUp>> getAllShards({required String filePath}) =>
      RustLib.instance.api
          .crateApiShardShardBackUpGetAllShards(filePath: filePath);

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<ShardBackUp> newInstance(
          {required String deviceSerial,
          required String shardIdentifier,
          required List<int> shard}) =>
      RustLib.instance.api.crateApiShardShardBackUpNew(
          deviceSerial: deviceSerial,
          shardIdentifier: shardIdentifier,
          shard: shard);

  Future<Uint8List> toBytes() =>
      RustLib.instance.api.crateApiShardShardBackUpToBytes(
        that: this,
      );

  @override
  int get hashCode =>
      deviceSerial.hashCode ^
      shardIdentifier.hashCode ^
      timestamp.hashCode ^
      shard.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is ShardBackUp &&
          runtimeType == other.runtimeType &&
          deviceSerial == other.deviceSerial &&
          shardIdentifier == other.shardIdentifier &&
          timestamp == other.timestamp &&
          shard == other.shard;
}
